/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package au.com.totemsoft.elixir.survey.v1.api;

import java.util.UUID;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import au.com.totemsoft.elixir.survey.v1.model.SurveyRequest;
import au.com.totemsoft.elixir.survey.v1.model.SurveyResponse;
import au.com.totemsoft.elixir.survey.v1.model.UploadResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Validated
@Api(value = "survey", description = "the survey API")
public interface SurveyApi {

    SurveyApi getDelegate();

    /**
     * POST /survey/create : Create Survey
     * Create Survey
     *
     * @param surveyRequest Survey Request (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Create Survey", nickname = "create", notes = "Create Survey", response = SurveyResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SurveyResponse.class) })
    @RequestMapping(value = "/survey/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SurveyResponse> create(@ApiParam(value = "Survey Request" ,required=true )  @Valid @RequestBody SurveyRequest surveyRequest) {
        return getDelegate().create(surveyRequest);
    }


    /**
     * GET /survey/find/{reference} : Get Survey
     * Get Survey
     *
     * @param reference Reference (Survey Id) (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get Survey", nickname = "find", notes = "Get Survey", response = SurveyResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SurveyResponse.class) })
    @RequestMapping(value = "/survey/find/{reference}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SurveyResponse> find(@ApiParam(value = "Reference (Survey Id)",required=true) @PathVariable("reference") UUID reference) {
        return getDelegate().find(reference);
    }


    /**
     * PUT /survey/update : Update Survey
     * Update Survey
     *
     * @param surveyRequest Survey Request (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update Survey", nickname = "update", notes = "Update Survey", response = SurveyResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SurveyResponse.class) })
    @RequestMapping(value = "/survey/update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<SurveyResponse> update(@ApiParam(value = "Survey Request" ,required=true )  @Valid @RequestBody SurveyRequest surveyRequest) {
        return getDelegate().update(surveyRequest);
    }


    /**
     * POST /survey/upload/{reference} : Uploads a file.
     * Uploads a file.
     *
     * @param reference Reference (Survey Id) (required)
     * @param fileUpload The file to upload. (required)
     * @param fileNote Description of file content. (optional)
     * @return Success (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access token does not have the required scope (status code 403)
     */
    @ApiOperation(value = "Uploads a file.", nickname = "upload", notes = "Uploads a file.", response = UploadResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UploadResponse.class),
        @ApiResponse(code = 401, message = "Not authenticated"),
        @ApiResponse(code = 403, message = "Access token does not have the required scope") })
    @RequestMapping(value = "/survey/upload/{reference}",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<UploadResponse> upload(@ApiParam(value = "Reference (Survey Id)",required=true) @PathVariable("reference") UUID reference,@ApiParam(value = "The file to upload.") @Valid @RequestPart(value = "fileUpload") MultipartFile fileUpload,@ApiParam(value = "Description of file content.") @RequestPart(value="fileNote", required=false)  String fileNote) {
        return getDelegate().upload(reference, fileUpload, fileNote);
    }

}
