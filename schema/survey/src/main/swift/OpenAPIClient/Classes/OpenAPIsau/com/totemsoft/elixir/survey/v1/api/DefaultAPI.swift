//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DefaultAPI {
    /**
     Create Survey.
     
     - parameter client: (header) Client Name 
     - parameter surveyRequest: (body) Survey Request 
     - parameter location: (header) Location Name (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSurvey(client: String, surveyRequest: SurveyRequest, location: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SurveySummaryResponse?,_ error: Error?) -> Void)) {
        createSurveyWithRequestBuilder(client: client, surveyRequest: surveyRequest, location: location).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Survey.
     - POST /survey/create
     - Create Survey for user (current selected client/location).
     - parameter client: (header) Client Name 
     - parameter surveyRequest: (body) Survey Request 
     - parameter location: (header) Location Name (optional)
     - returns: RequestBuilder<SurveySummaryResponse> 
     */
    open class func createSurveyWithRequestBuilder(client: String, surveyRequest: SurveyRequest, location: String? = nil) -> RequestBuilder<SurveySummaryResponse> {
        let path = "/survey/create"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: surveyRequest)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "client": client.encodeToJSON(),
            "location": location?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SurveySummaryResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Download a file.
     
     - parameter reference: (path) Reference (Survey Id) 
     - parameter folderId: (path) Folder Id 
     - parameter filename: (query) File name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func download(reference: UUID, folderId: String, filename: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        downloadWithRequestBuilder(reference: reference, folderId: folderId, filename: filename).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a file.
     - GET /survey/download/{reference}/{folderId}
     - Download a file (for Survey).
     - parameter reference: (path) Reference (Survey Id) 
     - parameter folderId: (path) Folder Id 
     - parameter filename: (query) File name 
     - returns: RequestBuilder<URL> 
     */
    open class func downloadWithRequestBuilder(reference: UUID, folderId: String, filename: String) -> RequestBuilder<URL> {
        var path = "/survey/download/{reference}/{folderId}"
        let referencePreEscape = "\(APIHelper.mapValueToPathItem(reference))"
        let referencePostEscape = referencePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reference}", with: referencePostEscape, options: .literal, range: nil)
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filename": filename.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Receives all clients.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findClients(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ClientResponse]?,_ error: Error?) -> Void)) {
        findClientsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Receives all clients.
     - GET /client/find
     - Receives all clients for a user.
     - returns: RequestBuilder<[ClientResponse]> 
     */
    open class func findClientsWithRequestBuilder() -> RequestBuilder<[ClientResponse]> {
        let path = "/client/find"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ClientResponse]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Receives all clients.
     
     - parameter userId: (path) User Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findClientsByUser(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ClientResponse]?,_ error: Error?) -> Void)) {
        findClientsByUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Receives all clients.
     - GET /client/find/{userId}
     - Receives all clients for a user.
     - parameter userId: (path) User Id 
     - returns: RequestBuilder<[ClientResponse]> 
     */
    open class func findClientsByUserWithRequestBuilder(userId: String) -> RequestBuilder<[ClientResponse]> {
        var path = "/client/find/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ClientResponse]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Survey.
     
     - parameter client: (header) Client Name 
     - parameter reference: (path) Reference (Survey Id) 
     - parameter folderId: (path) Folder Id 
     - parameter location: (header) Location Name (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSurvey(client: String, reference: UUID, folderId: String, location: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SurveyResponse?,_ error: Error?) -> Void)) {
        findSurveyWithRequestBuilder(client: client, reference: reference, folderId: folderId, location: location).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Survey.
     - GET /survey/find/{reference}/{folderId}
     - Get Survey (by reference).
     - parameter client: (header) Client Name 
     - parameter reference: (path) Reference (Survey Id) 
     - parameter folderId: (path) Folder Id 
     - parameter location: (header) Location Name (optional)
     - returns: RequestBuilder<SurveyResponse> 
     */
    open class func findSurveyWithRequestBuilder(client: String, reference: UUID, folderId: String, location: String? = nil) -> RequestBuilder<SurveyResponse> {
        var path = "/survey/find/{reference}/{folderId}"
        let referencePreEscape = "\(APIHelper.mapValueToPathItem(reference))"
        let referencePostEscape = referencePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reference}", with: referencePostEscape, options: .literal, range: nil)
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "client": client.encodeToJSON(),
            "location": location?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SurveyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Find all Surveys for user.
     
     - parameter client: (header) Client Name 
     - parameter location: (header) Location Name (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSurveys(client: String, location: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [SurveySummaryResponse]?,_ error: Error?) -> Void)) {
        findSurveysWithRequestBuilder(client: client, location: location).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find all Surveys for user.
     - GET /survey/find
     - Find all Surveys for user (current selected client/location).
     - parameter client: (header) Client Name 
     - parameter location: (header) Location Name (optional)
     - returns: RequestBuilder<[SurveySummaryResponse]> 
     */
    open class func findSurveysWithRequestBuilder(client: String, location: String? = nil) -> RequestBuilder<[SurveySummaryResponse]> {
        let path = "/survey/find"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "client": client.encodeToJSON(),
            "location": location?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[SurveySummaryResponse]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update Survey.
     
     - parameter client: (header) Client Name 
     - parameter surveyRequest: (body) Survey Request 
     - parameter location: (header) Location Name (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSurvey(client: String, surveyRequest: SurveyRequest, location: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SurveyResponse?,_ error: Error?) -> Void)) {
        updateSurveyWithRequestBuilder(client: client, surveyRequest: surveyRequest, location: location).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Survey.
     - PUT /survey/update
     - Update Survey (for reference).
     - parameter client: (header) Client Name 
     - parameter surveyRequest: (body) Survey Request 
     - parameter location: (header) Location Name (optional)
     - returns: RequestBuilder<SurveyResponse> 
     */
    open class func updateSurveyWithRequestBuilder(client: String, surveyRequest: SurveyRequest, location: String? = nil) -> RequestBuilder<SurveyResponse> {
        let path = "/survey/update"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: surveyRequest)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "client": client.encodeToJSON(),
            "location": location?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SurveyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Upload a file.
     
     - parameter reference: (path) Reference (Survey Id) 
     - parameter folderId: (path) Folder Id 
     - parameter fileUpload: (form) The file to upload. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func upload(reference: UUID, folderId: String, fileUpload: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UploadResponse?,_ error: Error?) -> Void)) {
        uploadWithRequestBuilder(reference: reference, folderId: folderId, fileUpload: fileUpload).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload a file.
     - POST /survey/upload/{reference}/{folderId}
     - Uploads a file (for Survey).
     - parameter reference: (path) Reference (Survey Id) 
     - parameter folderId: (path) Folder Id 
     - parameter fileUpload: (form) The file to upload. 
     - returns: RequestBuilder<UploadResponse> 
     */
    open class func uploadWithRequestBuilder(reference: UUID, folderId: String, fileUpload: URL) -> RequestBuilder<UploadResponse> {
        var path = "/survey/upload/{reference}/{folderId}"
        let referencePreEscape = "\(APIHelper.mapValueToPathItem(reference))"
        let referencePostEscape = referencePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reference}", with: referencePostEscape, options: .literal, range: nil)
        let folderIdPreEscape = "\(APIHelper.mapValueToPathItem(folderId))"
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "fileUpload": fileUpload.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UploadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
