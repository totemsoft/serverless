//
// SurveyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class SurveyAPI {
    /**
     Get/Create Survey
     
     - parameter surveyRequest: (body) Survey Request 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func survey(surveyRequest: RequestSurvey, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseSurvey?,_ error: Error?) -> Void)) {
        surveyWithRequestBuilder(surveyRequest: surveyRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get/Create Survey
     - POST /survey
     - Obtain a survey (will create one if does not exists)
     - parameter surveyRequest: (body) Survey Request 
     - returns: RequestBuilder<ResponseSurvey> 
     */
    open class func surveyWithRequestBuilder(surveyRequest: RequestSurvey) -> RequestBuilder<ResponseSurvey> {
        let path = "/survey"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: surveyRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseSurvey>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Survey Questions
     
     - parameter reference: (header) Reference of request. See [HTTP Headers](#request-headers). 
     - parameter surveyRequest: (body) Survey Request 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func surveyQuestions(reference: String, surveyRequest: RequestSurvey, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseSurveyQuestions?,_ error: Error?) -> Void)) {
        surveyQuestionsWithRequestBuilder(reference: reference, surveyRequest: surveyRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Survey Questions
     - POST /survey/questions
     - Obtain a list of survey questions
     - parameter reference: (header) Reference of request. See [HTTP Headers](#request-headers). 
     - parameter surveyRequest: (body) Survey Request 
     - returns: RequestBuilder<ResponseSurveyQuestions> 
     */
    open class func surveyQuestionsWithRequestBuilder(reference: String, surveyRequest: RequestSurvey) -> RequestBuilder<ResponseSurveyQuestions> {
        let path = "/survey/questions"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: surveyRequest)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "reference": reference.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseSurveyQuestions>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Uploads a file.
     
     - parameter reference: (header) Reference of request. See [HTTP Headers](#request-headers). 
     - parameter fileUpload: (form) The file to upload. 
     - parameter fileNote: (form) Description of file content. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func surveyUpload(reference: String, fileUpload: URL, fileNote: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ResponseUpload?,_ error: Error?) -> Void)) {
        surveyUploadWithRequestBuilder(reference: reference, fileUpload: fileUpload, fileNote: fileNote).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Uploads a file.
     - POST /survey/upload
     - Uploads a file.
     - parameter reference: (header) Reference of request. See [HTTP Headers](#request-headers). 
     - parameter fileUpload: (form) The file to upload. 
     - parameter fileNote: (form) Description of file content. (optional)
     - returns: RequestBuilder<ResponseUpload> 
     */
    open class func surveyUploadWithRequestBuilder(reference: String, fileUpload: URL, fileNote: String? = nil) -> RequestBuilder<ResponseUpload> {
        let path = "/survey/upload"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "fileUpload": fileUpload.encodeToJSON(),
            "fileNote": fileNote?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "reference": reference.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ResponseUpload>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
