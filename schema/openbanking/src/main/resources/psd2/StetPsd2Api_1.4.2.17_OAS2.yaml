swagger: '2.0'

info:
  version: "1.4.2.17"

### The [title] directive might be customized within each implementation
  title: PSD2 ASPSP services for AISP, PISP and CBPII.

  description: |
    This API intends to provide an interface between
    - Account Servicing Payment Service Providers (ASPSP)
    - Third Party (Payment Service) Providers (TPP)
    
    TPP may act with different roles as described below:
    - Account Information Service Providers (AISP)
    - Payment Initiation Service Providers (PISP)
    - Card Based Payment Instrument Issuers (CBPII)
    
    The Payment Service User (PSU) is the owner of the accounts held by the ASPSP and gives accreditations to the TPP in order to access his accounts information or initiates payment from these accounts
    
    The API is designed on a REST model using JSON structures.
    
    The Richardson Maturity Model is applied on level three using HAL HYPERMEDIA links
     
  contact:
    name: STET
    url: https://www.stet.eu/en/psd2/
    email: psd2@stet.eu
  license:
    name: Creative Commons Attribution 3.0 France (CC BY 3.0 FR) 

### The [basePath] directive might be customized within each implementation
basePath: /v1

schemes: 
  - https

consumes:
  - application/json

### Modifications to clarify or complete the use of the different OAUTH flows
securityDefinitions:
  accessCode:
    description: |
      In order to access the PSU's account information, the AISP needs to get either an authorization code grant or a resource owner password OAUTH2 token.
      In order to post a funds confirmation request, the CBPII needs to get either an authorization code grant or a resource owner password OAUTH2 token when registration of the account has not been previously processed.
      In order to confirm a Payment or Transfer Request, the PISP needs to get either an authorization code grant or a client credential OAUTH2 token. 
      The client_id field within the token request must be filled with the value of the organization identifier attribute that has been set in the distinguished name of eIDAS certificate of the TPP, according to ETSI recommandations. 
      (cf Â§5.2.1 of [ETSI specfication](https://www.etsi.org/standards-search#page=1&search=TS119495))
    type: oauth2
    scopes:
      aisp: Access by an AISP to one given PSU's account
      cbpii: Access by a CBPII to one given PSU's account to check payment coverage
      pisp: Access by a PISP for posting a confirmation after authentication of the PSU through OAUTH2 Authorization Code
      extended_transaction_history: Access by an AISP to a transaction history over more than the 90 last days
    flow: accessCode
    ### The [authorizationUrl] and [tokenUrl] directives might be customized within each implementation
    authorizationUrl: https://oauth2.aspsp/authorization
    tokenUrl: https://oauth2.aspsp/token
  resourceOwnerIdentification:
    description: |
      In order to access the PSU's account information, the AISP needs to get either an authorization code grant or a resource owner password OAUTH2 token.
      In order to post a funds confirmation request, the CBPII needs to get either an authorization code grant or a resource owner password OAUTH2 token when registration of the account has not been previously processed.
      The client_id field within the token request must be filled with the value of the organization identifier attribute that has been set in the distinguished name of eIDAS certificate of the TPP, according to ETSI recommandations. 
      (cf Â§5.2.1 of [ETSI specfication](https://www.etsi.org/standards-search#page=1&search=TS119495))
    type: oauth2
    scopes:
      aisp: Access by an AISP to one given PSU's account
      cbpii: Access by a CBPII to one given PSU's account to check payment coverage
      extended_transaction_history: Access by an AISP to a transaction history over more than the 90 last days
    flow: password
    ### The [tokenUrl] directives might be customized within each implementation
    tokenUrl: https://oauth2.aspsp/token
  clientCredentials:
    description: |
      In order to post, get or modify a Payment or Transfer Request, the PISP needs to get a client credential OAUTH2 token. 
      In order to confirm a Payment or Transfer Request, the PISP needs to get either an authorization code grant or a client credential OAUTH2 token. 
      In order to post a funds confirmation request, the CBPII needs to get a client credential OAUTH2 token when registration of the account has already been previously processed.
      The client_id field within the token request must be filled with the value of the organization identifier attribute that has been set in the distinguished name of eIDAS certificate of the TPP, according to ETSI recommandations. 
      (cf Â§5.2.1 of [ETSI specfication](https://www.etsi.org/standards-search#page=1&search=TS119495))
    type: oauth2
    scopes:
      pisp: Access by a PISP to payments resources
      cbpii: Access by a CBPII to one given PSU's account to check payment coverage
    flow: application
    ### The [tokenUrl] directives might be customized within each implementation
    tokenUrl: https://oauth2.aspsp/token

### modifications of the references to other parts of the documentation
paths:
  /accounts:
    get:
      operationId: accountsGet
      tags:
        - AISP 
      summary: Retrieval of the PSU accounts (AISP)
      produces:
        - application/hal+json; charset=utf-8
      description: |
        ### Description
        This call returns all payment accounts that are relevant the PSU on behalf of whom the AISP is connected.
        Thanks to HYPERMEDIA, each account is returned with the links aiming to ease access to the relevant transactions and balances.
        The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results.

        ### Prerequisites
          
        - The TPP has been registered by the Registration Authority for the AISP role.
        - The TPP and the PSU have a contract that has been enrolled by the ASPSP            
            - At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. Â§ 3.4.2).
        - The TPP and the ASPSP have successfully processed a mutual check and authentication
        - The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. Â§ 3.4.2) if any.
        - The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.
          
        ### Business Flow
        The TPP sends a request to the ASPSP for retrieving the list of the PSU payment accounts.
        The ASPSP computes the relevant PSU accounts and builds the answer as an accounts list. 
        The result may be subject to pagination in order to avoid an excessive result set. 
        Each payment account will be provided with its characteristics.
      security:
        - accessCode:
            - aisp
        - resourceOwnerIdentification:
            - aisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'     
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"  
      responses:
        "200":
          description: |
            The ASPSP return a PSU context 
            - listing the accounts that have been made available to the AISP by the PSU and, 
            - for each of these accounts, the further transactions that have been enabled by the PSU through HYPERMEDIA links.
          schema: 
            $ref: '#/definitions/HalAccounts'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "204":
          $ref: '#/responses/204' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "404":
          $ref: '#/responses/404' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503":
          $ref: '#/responses/503' 

  /accounts/{accountResourceId}/balances:
    get:
      operationId: accountsBalancesGet
      produces:
        - application/hal+json; charset=utf-8
      description: |
        ### Description
        This call returns a set of balances for a given PSU account that is specified by the AISP through an account resource Identification
        ### Prerequisites         
        - The TPP has been registered by the Registration Authority for the AISP role
        - The TPP and the PSU have a contract that has been enrolled by the ASPSP
          - At this step, the ASPSP has delivered an OAUTH2 &ldquo;Authorization Code&rdquo; or &ldquo;Resource Owner Password&rdquo; access token to the TPP (cf. &sect; 3.4.2).
        - The TPP and the ASPSP have successfully processed a mutual check and authentication
        - The TPP has presented its OAUTH2 &ldquo;Authorization Code&rdquo; or &ldquo;Resource Owner Password&rdquo; access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. &sect; 3.4.2) if any.
        - The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.
        - The TPP has previously retrieved the list of available accounts for the PSU
        ### Business flow
        The AISP requests the ASPSP on one of the PSU&rsquo;s accounts.
        The ASPSP answers by providing a list of balances on this account.
          - The ASPSP must provide at least the accounting balance on the account.
          - The ASPSP can provide other balance restitutions, e.g. instant balance, as well, if possible.
          - Actually, from the PSD2 perspective, any other balances that are provided through the Web-Banking service of the ASPSP must also be provided by this ASPSP through the API.
          
      summary: Retrieval of an account balances report (AISP)
      tags:
        - AISP
      security:
        - accessCode:
            - aisp
        - resourceOwnerIdentification:
            - aisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/AccountResourceIdentification'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'  
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"     
      responses:
        "200":
          description: The ASPSP answers with a list of account balances
          schema:
            $ref: '#/definitions/HalBalances'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "204":
          $ref: '#/responses/204' 
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "404":
          $ref: '#/responses/404' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503":
          $ref: '#/responses/503' 

### modifications of the references to other parts of the documentation
  /accounts/{accountResourceId}/transactions:
    get:
      operationId: accountsTransactionsGet
      produces:
        - application/hal+json; charset=utf-8
      description: |
        ### Description
        This call returns transactions for an account for a given PSU account that is specified by the AISP through an account resource identification.
        The request may use some filter parameter in order to restrict the query 
          - on a given imputation date range
          - past a given incremental technical identification
        The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results.
        ### Prerequisites
        - The TPP has been registered by the Registration Authority for the AISP role
        - The TPP and the PSU have a contract that has been enrolled by the ASPSP
          - At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. Â§ 3.4.2).
        - The TPP and the ASPSP have successfully processed a mutual check and authentication 
        - The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. Â§ 3.4.2) is any.
        - The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.
        - The TPP has previously retrieved the list of available accounts for the PSU
        ### Business flow
        The AISP requests the ASPSP on one of the PSUâ€™s accounts. It may specify some selection criteria.
        The ASPSP answers by a set of transactions that matches the query. The result may be subject to pagination in order to avoid an excessive result set.
        The default transaction set, in the absence of filter query parameter, has to be specified and documented by the implementation. 
      summary: Retrieval of an account transaction set (AISP)
      security:
        - accessCode:
            - aisp
        - resourceOwnerIdentification:
            - aisp
      tags:
        - AISP
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/AccountResourceIdentification'
        - $ref: '#/parameters/FromImputationDate'
        - $ref: '#/parameters/ToImputationDate'
        - $ref: '#/parameters/FromEntryReference'
        - $ref: '#/parameters/ToEntryReference'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"       
      responses:
        "200":
          description: Complete transactions response
          schema:
            $ref: '#/definitions/HalTransactions'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "204":
          $ref: '#/responses/204' 
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "404":
          $ref: '#/responses/404' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503":
          $ref: '#/responses/503' 

### modifications of the references to other parts of the documentation
  /consents:
    put:
      operationId: consentsPut
      tags:
        - AISP
      summary: Forwarding the PSU consent (AISP)
      produces:
        - application/json; charset=utf-8
      description: |
        ### Description
        In the mixed detailed consent on accounts
        - the AISP captures the consent of the PSU
        - then it forwards this consent to the ASPSP
        This consent replaces any prior consent that was previously sent by the AISP.
        ### Prerequisites
        - The TPP has been registered by the Registration Authority for the AISP role.
        - The TPP and the PSU have a contract that has been enrolled by the ASPSP
          - At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. Â§ 3.4.2).
        - The TPP and the ASPSP have successfully processed a mutual check and authentication
        - The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. Â§ 3.4.2) if any.
        - The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.
        ### Business Flow
        The PSU specifies to the AISP which of his/her accounts will be accessible and which functionalities should be available.
        The AISP forwards these settings to the ASPSP.
        The ASPSP answers by HTTP201 return code.
      security:
        - accessCode:
            - aisp
        - resourceOwnerIdentification:
            - aisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/Consents'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'     
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"  
      responses:
        "201":
          description: Created
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "501":
          $ref: '#/responses/501' 
        "503":
          $ref: '#/responses/503' 

### modifications of the references to other parts of the documentation
  /end-user-identity:
    get:
      operationId: EndUserIdentityGet
      tags:
        - AISP
      produces:
        - application/hal+json; charset=utf-8
      summary: Retrieval of the identity of the end-user (AISP)
      description: |
        ### Description
        This call returns the identity of the PSU (end-user).
        ### Prerequisites
        - The TPP has been registered by the Registration Authority for the AISP role.
        - The TPP and the PSU have a contract that has been enrolled by the ASPSP
            - At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. Â§ 3.4.2).
        - The TPP and the ASPSP have successfully processed a mutual check and authentication
        - The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. Â§ 3.4.2) if any.
        - The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.
        ### Business Flow
          The AISP asks for the identity of the PSU.
          The ASPSP answers with the identity, i.e. first and last names of the end-user.
      security:
        - accessCode:
            - aisp
        - resourceOwnerIdentification:
            - aisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"       
      responses:
        "200":
          description: |
            The ASPSP returns the identity of the PSU 
          schema: 
            $ref: '#/definitions/HalEndUserIdentity'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "204":
          $ref: '#/responses/204' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "404":
          $ref: '#/responses/404' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
      

### modifications of the references to other parts of the documentation
  /trusted-beneficiaries:
    get:
      operationId: trustedBeneficiariesGet
      tags:
        - AISP
      produces:
        - application/hal+json; charset=utf-8
      summary: Retrieval of the trusted beneficiaries list (AISP)
      description: |
        ### Description
        This call returns all trusted beneficiaries that have been set by the PSU.
        Those beneficiaries can benefit from an SCA exemption during payment initiation.
        The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results.
        ### Prerequisites
        - The TPP has been registered by the Registration Authority for the AISP role.
        - The TPP and the PSU have a contract that has been enrolled by the ASPSP
            - At this step, the ASPSP has delivered an OAUTH2 "Authorization Code" or "Resource Owner Password" access token to the TPP (cf. Â§ 3.4.2).
        - The TPP and the ASPSP have successfully processed a mutual check and authentication
        - The TPP has presented its OAUTH2 "Authorization Code" or "Resource Owner Password" access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. Â§ 3.4.2) if any.
        - The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.
        ### Business Flow
        The AISP asks for the trusted beneficiaries list.
        The ASPSP answers with a list of beneficiary details structure.
      security:
        - accessCode:
            - aisp
        - resourceOwnerIdentification:
            - aisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"       
      responses:
        "200":
          description: |
            The ASPSP returns the list of whitelisted beneficiaries 
          schema: 
            $ref: '#/definitions/HalBeneficiaries'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "204":
          $ref: '#/responses/204' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "404":
          $ref: '#/responses/404' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "501":
          $ref: '#/responses/501' 

### modifications of the references to other parts of the documentation
  /funds-confirmations:
    post:
      operationId: fundsConfirmationsPost
      tags:
        - CBPII
      produces:
        - application/hal+json; charset=utf-8
      summary: Payment coverage check request (CBPII)
      description: |
        ### Description
        The CBPII can ask an ASPSP to check if a given amount can be covered by the liquidity that is available on a PSU cash account or payment card.
        ### Prerequisites
        - The TPP has been registered by the Registration Authority for the CBPII role
        - The TPP and the PSU have a contract that has been registered by the ASPSP
          - At this step, the ASPSP has delivered an "Authorization Code", a "Resource Owner Password" or a "Client Credential" OAUTH2 access token to the TPP (cf. Â§ 3.4.2).
          - Each ASPSP has to implement either the "Authorization Code"/"Resource Owner Password" or the "Client Credential" OAUTH2 access token model.
          - Doing this, it will edit the [security] section on this path in order to specify which model it has chosen
        - The TPP and the ASPSP have successfully processed a mutual check and authentication 
        - The TPP has presented its OAUTH2 "Authorization Code", "Resource Owner Password" or "Client Credential" access token which allows the ASPSP to identify the relevant PSU.
        ### Business flow
        The CBPII requests the ASPSP for a payment coverage check against either a bank account or a card primary identifier.
        The ASPSP answers with a structure embedding the original request and the result as a Boolean.      
      security:
        - accessCode: 
            - cbpii
        - resourceOwnerIdentification:
            - cbpii
        - clientCredentials:
            - cbpii
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PaymentCoverageRequest'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'       
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"       
      responses:
        "200":
          description: payment coverage request 
          schema:
            $ref: '#/definitions/HalPaymentCoverageReport'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
            Digest:
              type: string
              description: Digest of the body
            Signature:
              type: string
              description: |
                [http-signature of the response ](https://datatracker.ietf.org/doc/draft-cavage-http-signatures/)
                The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate.
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503":
          $ref: '#/responses/503' 

  /payment-requests:
    post:
      operationId: paymentRequestsPost
      tags:
        - PISP
      produces:
        - application/hal+json; charset=utf-8
      summary: Payment request initiation (PISP)
### modified for CR271 Security impact of Client Credential Token
### modified for CR277 Modify the decision table for valuing the payment request depending on the type of the payment
### modified for CR298 Precision on the PSU-PISP contract
### modifications of the references to other parts of the documentation
      description: |
        ### Description
        The following use cases can be applied:
        - payment request on behalf of a merchant
        - transfer request on behalf of the account's owner
        - standing-order request on behalf of the account's owner
        #### Data content
        A payment request or a transfer request might embed several payment instructions having
        - one single execution date or multiple execution dates
          - case of one single execution date, this date must be set at the payment level
          - case of multiple execution dates, those dates must be set at each payment instruction level
        - one single beneficiary or multiple beneficiaries
          - case of one single beneficiary, this beneficiary must be set at the payment level
          - case of multiple beneficiaries, those beneficiaries must be set at each payment instruction level
        Having at the same time multiple beneficiaries and multiple execution date might not be a relevant business case, although it is technically allowed.
        Each implementation will have to specify which business use cases are actually supported.       
        A standing order request must embed one single payment instruction and must address one single beneficiary.
        - The beneficiary must be set at the payment level
        - The standing order specific characteristics (start date, periodicity...) must be set at the instruction level
                           
        Payment request can rely for execution on different payment instruments:
        - SEPA Credit Transfer (SCT)
        - Domestic Credit Transfer in a non-Euro-currency
        - International payment
        The following table indicates how to use the different fields, depending on the payment instrument:

        | Structure | SEPA payments | Domestic payments in non-euro currency | International payments |
        | --------- | ------------- | -------------------------------------- | ---------------------- |
        | PaymentTypeInformation/InstructionPriority (payment level) | "HIGH" for high-priority SCT, "NORM" for other SCT, Ignored for SCTInst | "HIGH" for high-priority CT, "NORM" or ignored for other CT | "HIGH" for high-priority payments, "NORM" or ignored for other payments |
        | PaymentTypeInformation/ServiceLevel (payment level) | "SEPA" for SCT and SCTInst | ignored | ignored |
        | PaymentTypeInformation/CategoryPurpose (payment level) | "CASH" for transfer request, "DVPM" for payment request on behalf of a merchant || "CORT" for generic international payments, "INTC" for transfers between two branches within the same company, "TREA" for treasury transfers |
        | PaymentTypeInformation/LocalInstrument (payment level) | "INST" pour les SCTInst, otherwise ignored | Ignored or valued with ISO20022 external code ||
        | RequestedExecutionDate (either at payment or transaction level) | Mandatory (indicates the date on debit on the ordering party account) |||
        | EndToEndIdentification (at transaction level) | Mandatory | Optional ||
        | UltimateDebtor (at transaction level) | Optional |||
        | UltimateCreditor (at transaction level) | Optional |||
        | InstructedAmount (at transaction level) | Mandatory || Mandatory and exclusive use of one of these structures |
        | EquivalentAmount (at transaction level) | Not used || Mandatory and exclusive use of one of these structures |
        | ChargeBearer (at transaction level) | "SLEV" for SCT and SCTInst | "SLEV" or "SHAR" | "CRED", "DEBT" or "SHAR" |
        | Purpose (at transaction level) | Optional |||
        | RegulatoryReportingCode (at transaction level) | Not used | Mandatory (possibly multiple values) |
        | InstructionForCreditorAgent (at transaction level) | Not used || Optional (possibly multiple values) |
        | RemittanceInformation | Mandatory. Structured or unstructured, depending on the local rules and constraints |||
        | Debtor (at payment level) | Mandatory, 2 address lines only | Mandatory, 4 address lines only | Mandatory. Complete strustured address can be used. |
        | DebtorAccount (at payment level) | Optional | Optional. Account currency may be specified ||
        | DebtorAgent (at payment level) | Optional |||
        | Creditor (either at payment or transaction level) | Mandatory, 2 address lines only | Mandatory, 4 address lines only | Mandatory. Complete strustured address can be used. Date and place of birth must be specified |
        | CreditorAccount (either at payment or transaction level) | Mandatory | Mandatory. Account currency may be specified ||
        | CreditorAgent (either at payment or transaction level) | Optional |||
        | ClearingSystemId et ClearingSystemMemberId (either at payment or transaction level) | Not used || Optional |
        | IntermediaryAgent et IntermediaryAgentAccount (either at payment or transaction level) | Not used | Optional ||
          
        #### Prerequisites for all use cases
        - The TPP has been registered by the Registration Authority for the PISP role
        - The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. Â§ 3.4.2).
        - The TPP and the ASPSP have successfully processed a mutual check and authentication 
        - The TPP has presented its "OAUTH2 Client Credential" access token
        
        #### Business flow
        ##### Payment Request use case
        The PISP forwards a payment request on behalf of a merchant.
        The PSU buys some goods or services on an e-commerce website held by a merchant. Among other payment method, the merchant suggests the use of a PISP service. As there is obviously a contract between the merchant and the PISP, there is no need for the ASPSP to check the existence of such a contract between the PSU and this PISP to initiate the process.
        Case of the PSU that chooses to use the PISP service:
        - The merchant forwards the requested payment characteristics to the PISP and redirects the PSU to the PISP portal.
        - The PISP requests from the PSU which ASPSP will be used.
        - The PISP prepares the Payment Request and sends this request to the ASPSP.
        - The Request can embed several payment instructions having different requested execution date.
        - The beneficiary, as being the merchant, is set at the payment level.
             
          ##### Transfer Request use case
          The PISP forwards a transfer request on behalf of the owner of the account.
          - The PSU provides the PISP with all information needed for the transfer.
          - The PISP prepares the Transfer Request and sends this request to the relevant ASPSP that holds the debtor account.
          - The Request can embed several payment instructions having different beneficiaries.
          - The requested execution date, as being the same for all instructions, is set at the payment level.
             
          ##### Standing Order Request use case
          The PISP forwards a Standing Order request on behalf of the owner of the account.
          - The PSU provides the PISP with all information needed for the Standing Order.
          - The PISP prepares the Standing Order Request and sends this request to the relevant ASPSP that holds the debtor account.
          - The Request embeds one single payment instruction with
            - The requested execution date of the first occurrence
            - The requested execution frequency of the payment in order to compute further execution dates
            - An execution rule to handle cases when the computed execution dates cannot be processed (e.g. bank holydays)
            - An optional end date for closing the standing Order
             
      security:
        - clientCredentials:
            - pisp
### Modified for CR244: Adding information in order to handle the PSU language preferences 
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PaymentRequest'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'       
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"
        - $ref: "#/parameters/UiLocales"
      responses:
        "201":
          description: The request has been created as a resource. The ASPSP must authenticate the PSU.
          schema:
            $ref: '#/definitions/HalPaymentRequestCreation'
          headers:
            location:
              description: |
                URI of the created (and updated if needed) Payment Request. 
                Actually, this link is the URI to be used (cf. Â§ 4.6) for retrieving the Payment Request ant its status:
                - GET /payment-requests/{paymentRequestResourceId}
                The parameter {paymentRequestResourceId} is the identifier of the Payment Request, as the resource that was created on the ASPSP server side.                        
              type: string
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
            Digest:
              type: string
              description: Digest of the body
            Signature:
              type: string
              description: |
                [http-signature of the response ](https://datatracker.ietf.org/doc/draft-cavage-http-signatures/)
                The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate.
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503":
          $ref: '#/responses/503' 

### modifications of the references to other parts of the documentation
  /payment-requests/{paymentRequestResourceId}:
    get:
      operationId: paymentRequestsGet
      tags: 
        - PISP
      produces:
        - application/hal+json; charset=utf-8
      summary: Retrieval of a payment request (PISP)
      description: |
        ### Description
        The following use cases can be applied:
        - retrieval of a payment request on behalf of a merchant
        - retrieval of a transfer request on behalf of the account's owner
        - retrieval of a standing-order request on behalf of the account's owner
        
        The PISP has previously sent a Request through a POST command.
        - The ASPSP has registered the Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Request.
        - The PISP gets the Request that has been updated with the resource identifiers, and eventually the status of the Payment/Transfer Request and the status of the subsequent credit transfer.

        ### Prerequisites
        - The TPP has been registered by the Registration Authority for the PISP role
        - The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. Â§ 3.4.2).
        - The TPP has previously posted a Request which has been saved by the ASPSP (cf. Â§ 4.5.3)
          - The ASPSP has answered with a location link to the saved Payment/Transfer Request (cf. Â§ 4.5.4)
        - The TPP and the ASPSP have successfully processed a mutual check and authentication 
        - The TPP has presented its "OAUTH2 Client Credential" access token
        
        ### Business flow
        The PISP asks to retrieve the Payment/Transfer Request that has been saved by the ASPSP. The PISP uses the location link provided by the ASPSP in response of the posting of this request.
        The ASPSP returns the previously posted Payment/Transfer Request which is enriched with:
        - The resource identifiers given by the ASPSP
        - The status information of the Payment Request and of the subsequent credit transfer
        The status information must be available during at least 30 calendar days after the posting of the Payment Request. However, the ASPSP may increase this availability duration, based on its own rules.
      security:
        - clientCredentials:
            - pisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PaymentRequestResourceIdentification'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'       
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"       
      responses:
        "200":
          description: Retrieval of the previously posted Payment Request
          schema:
            $ref: '#/definitions/HalPaymentRequest'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
            Digest:
              type: string
              description: Digest of the body
            Signature:
              type: string
              description: |
                [http-signature of the response ](https://datatracker.ietf.org/doc/draft-cavage-http-signatures/)
                The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate.
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "404":
          $ref: '#/responses/404' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503":
          $ref: '#/responses/503' 

    put:
      operationId: paymentRequestPut
      tags: 
        - PISP
      summary: Modification of a Payment/Transfer Request (PISP)
### Modified for CR315: Add new reason codes for payment initiation cancellation by a PISP
### Modified for CR330: Add a precision on the PUT Payment-request when unauthorized modifications are posted
      description: |
        ### Description
        The PISP sent a Payment/Transfer Request through a POST command.
        The ASPSP registered the Payment/Transfer Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Request.
        The PISP got the Payment/Transfer Request that has been updated with the resource identifiers, and eventually the status of the Payment/Transfer Request and the status of the subsequent credit transfer.
        The PISP request for the payment cancellation (global cancellation) or for some payment instructions cancellation (partial cancellation)
        No other modification of the Payment/Transfer Request is allowed.
        ### Prerequisites
        - The TPP was registered by the Registration Authority for the PISP role
        - The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. Â§ 3.4.2).
        - The TPP previously posted a Payment/Transfer Request which was saved by the ASPSP (cf. Â§ 4.5.3)
          - The ASPSP answered with a location link to the saved Payment/Transfer Request (cf. Â§ 4.5.4)
          - The PISP retrieved the saved Payment/Transfer Request (cf. Â§ 4.5.4)
        - The TPP and the ASPSP successfully processed a mutual check and authentication 
        - The TPP presented its "OAUTH2 Client Credential" access token.
        - The TPP presented the payment/transfer request.
        - The PSU was successfully authenticated.
        
        ### Business flow
        #### Payment/Transfer request cancellation circumstances
        The cancellation of a Payment/Transfer request might be triggered by the PISP upon request of the PSU.
        It can also be triggered by the PISP itself in case of error or fraud detection.
        Since the consequence of the cancellation will be a rejection of the Payment/Transfer request globally or limited to some of its instructions, the modification of the payment request will focus on setting the relevant status to the value "CANC".
        This "CANC" status must however be explained through a reason code that can be set with the following values:

        | Reason | description |
        | ------ | ----------- |
        | DS02 | The PSU ordered the cancellation. |
        | DUPL | The PISP requests the cancellation for a duplication of a previous Payment/Transfer request |
        | FRAD | The PISP requests the cancellation for fraudulent origin of the Payment/Transfer request |
        | TECH | The PISP requests the cancellation for a technical issue on its side |

        #### Payment/Transfer request cancellation level
        - Case of a payment with multiple instructions or a standing order, the PISP asks to cancel the whole Payment/Transfer or Standing Order Request including all non-executed payment instructions by setting the [paymentInformationStatus] and the relevant [statusReasonInformation]  at payment level.
        - Case of a payment with multiple instructions, the PISP asks to cancel one or several payment instructions by setting the [transactionStatus] and the relevant [statusReasonInformation] at each relevant instruction level.
        
        Since the modification request needs a PSU authentication before committing, the modification request includes:
        - The specification of the authentication approaches that are supported by the PISP (any combination of "REDIRECT", "EMBEDDED-1-FACTOR" and "DECOUPLED" values).
        - In case of possible REDIRECT or DECOUPLED authentication approach, one or two call-back URLs to be used by the ASPSP at the finalisation of the authentication and consent process :
          - The first call-back URL will be called by the ASPSP if the Transfer Request is processed without any error or rejection by the PSU
          - The second call-back URL is to be used by the ASPSP in case of processing error or rejection by the PSU. Since this second URL is optional, the PISP might not provide it. In this case, the ASPSP will use the same URL for any processing result.
          - Both call-back URLS must be used in a TLS-secured request.
        - In case of possible "EMBEDDED-1-FACTOR" or "DECOUPLED" approaches, a PSU identifier that can be processed by the ASPSP for PSU recognition.
          
        - The ASPSP saves the updated Payment/Transfer Request and answers to the PISP. The answer embeds 
          - The specification of the chosen authentication approach taking into account both the PISP and the PSU capabilities.
          - In case of chosen REDIRECT authentication approach, the URL to be used by the PISP for redirecting the PSU in order to perform an authentication.
          
        Case of the PSU neither gives nor denies his/her consent, the Cancellation Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.
        If any modification of the payment request other than cancellation is applied by the PISP, the ASPSP must rejest the request with HTTP403 without modifying the payment request resource.
      security:
        - clientCredentials:
            - pisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PaymentRequestResourceIdentification'
        - $ref: '#/parameters/PaymentRequest'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'       
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"       
      responses:
        "200":
          description: The modification request has been saved. The ASPSP must authenticate the PSU before committing the update.
          schema:
            $ref: '#/definitions/HalPaymentRequestCreation'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
            Digest:
              type: string
              description: Digest of the body
            Signature:
              type: string
              description: |
                [http-signature of the response ](https://datatracker.ietf.org/doc/draft-cavage-http-signatures/)
                The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate.
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "404":
          $ref: '#/responses/404' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "409":
          $ref: '#/responses/409' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503":
          $ref: '#/responses/503' 

### modifications of the references to other parts of the documentation
### modifications to distinguish the authentication approaches for confirmation
  /payment-requests/{paymentRequestResourceId}/confirmation:
    post:
      operationId: paymentRequestConfirmationPost
      tags:
        - PISP
      produces:
        - application/hal+json; charset=utf-8
      summary: Confirmation of a payment request or a modification request using a standard PSU authentication (PISP)
      description: |
        ### Description
        The PISP confirms one of the following requests or modifications
        - payment request on behalf of a merchant
        - transfer request on behalf of the account's owner
        - standing-order request on behalf of the account's owner
        The ASPSP answers with a status of the relevant request and the subsequent Credit Transfer.

        ### Prerequisites
        -  The TPP has been registered by the Registration Authority for the PISP role
        -  The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. Â§ 3.4.2).
        -  The TPP has previously posted a Request which has been saved by the ASPSP (cf. Â§ 4.5.3)
          - The ASPSP has answered with a location link to the saved Payment Request (cf. Â§ 4.5.4)
          -  The TPP has retrieved the saved request in order to get the relevant resource Ids (cf. Â§ 4.6).
        -  The TPP and the ASPSP have successfully processed a mutual check and authentication 
        -  The TPP has presented its "OAUTH2 Client Credential" access token 
          
        ### Business flow
        Once the PSU has been authenticated using a standard procedure (non OAUTH2), it is the due to the PISP to confirm the Request to the ASPSP in order to complete the process flow.
        The ASPSP must wait for confirmation before executing the subsequent Credit Tranfer.
      security:
        - clientCredentials:
            - pisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PaymentRequestResourceIdentification'
        - $ref: '#/parameters/Confirmation'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"       
      responses:
        "200":
          description: retrieval of the Payment Request enriched with the status report 
          schema:
            $ref: '#/definitions/HalPaymentRequest'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
            Digest:
              type: string
              description: Digest of the body
            Signature:
              type: string
              description: |
                [http-signature of the response ](https://datatracker.ietf.org/doc/draft-cavage-http-signatures/)
                The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate.
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "409":
          $ref: '#/responses/409' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503": 
          $ref: '#/responses/503' 

### Added for CR271: Security impact of Client Credential Token
  /payment-requests/{paymentRequestResourceId}/o-confirmation:
    post:
      operationId: paymentRequestOConfirmationPost
      tags:
        - PISP
      produces:
        - application/hal+json; charset=utf-8
      summary: Confirmation of a payment request or a modification request using an OAUTH2 Authorization code grant (PISP)
      description: |
        ### Description
        The PISP confirms one of the following requests or modifications:
        - payment request on behalf of a merchant
        - transfer request on behalf of the account's owner
        - standing-order request on behalf of the account's owner
        The ASPSP answers with a status of the relevant request and the subsequent Credit Transfer.

        ### Prerequisites
        -  The TPP has been registered by the Registration Authority for the PISP role
        -  The TPP was provided with an OAUTH2 "Client Credential" access token by the ASPSP (cf. Â§ 3.4.2).
        -  The TPP has previously posted a Request which has been saved by the ASPSP (cf. Â§ 4.5.3)
          - The ASPSP has answered with a location link to the saved Payment Request (cf. Â§ 4.5.4)
          -  The TPP has retrieved the saved request in order to get the relevant resource Ids (cf. Â§ 4.6).
        -  The PSU has been authenticated by the ASPSP through an OAUTH2 authorization code grant flow (REDIRECT approach) and the PISP got the relevant token
        -  The TPP and the ASPSP have successfully processed a mutual check and authentication 
        -  The TPP has presented its "OAUTH2 Authorization Code" access token 
          
        ### Business flow
        Once the PSU has been authenticated through an OAUTH2 authorization code grant flow (REDIRECT approach), it is the due to the PISP to confirm the Request to the ASPSP in order to complete the process flow.
        The ASPSP must wait for confirmation before executing the subsequent Credit Tranfer.
      security:
        - accessCode:
            - pisp
      parameters:
        - $ref: '#/parameters/AuthorizationParameter'
        - $ref: '#/parameters/PaymentRequestResourceIdentification'
        - $ref: '#/parameters/Confirmation'
        - $ref: '#/parameters/PsuIpAddressHeader'
        - $ref: '#/parameters/PsuIpPortHeader'
        - $ref: '#/parameters/PsuHttpMethodHeader'
        - $ref: '#/parameters/PsuDateHeader'
        - $ref: '#/parameters/PsuGeoLocation'
        - $ref: '#/parameters/PsuUserAgentHeader'
        - $ref: '#/parameters/PsuRefererHeader'
        - $ref: '#/parameters/PsuAcceptHeader'
        - $ref: '#/parameters/PsuAcceptCharsetHeader'
        - $ref: '#/parameters/PsuAcceptEncodingHeader'
        - $ref: '#/parameters/PsuAcceptLanguageHeader'
        - $ref: '#/parameters/PsuDeviceId'     
        - $ref: '#/parameters/DigestHeader'       
        - $ref: '#/parameters/SignatureHeader'     
        - $ref: "#/parameters/Correlation"       
      responses:
        "200":
          description: retrieval of the Payment Request enriched with the status report 
          schema:
            $ref: '#/definitions/HalPaymentRequest'
          headers:
            X-Request-ID:
              type: string
              description: |
                Correlation header to be set in a request and retrieved in the relevant response
            Digest:
              type: string
              description: Digest of the body
            Signature:
              type: string
              description: |
                [http-signature of the response ](https://datatracker.ietf.org/doc/draft-cavage-http-signatures/)
                The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate.
### Added for CR270: Handling for deprecated entry points 
            Warning:
              type: string
              description: |
                Warning header.
                This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
        "400":
          $ref: '#/responses/400' 
        "401":
          $ref: '#/responses/401' 
        "403":
          $ref: '#/responses/403' 
        "405":
          $ref: '#/responses/405' 
        "406":
          $ref: '#/responses/406' 
        "408":
          $ref: '#/responses/408' 
        "409":
          $ref: '#/responses/409' 
        "429":
          $ref: '#/responses/429' 
        "500":
          $ref: '#/responses/500' 
        "503": 
          $ref: '#/responses/503' 

responses:
  204:
    description: No content.
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  400:
    description: Invalid status value
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  401:
    description: Unauthorized, authentication failure.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  403:
    description: Forbidden, authentication successful but access to resource is not allowed.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  404:
    description: Not found, no request available.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  405:
    description: Method Not Allowed.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  406:
    description: Not Acceptable.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  408:
    description: Request Timeout.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  409:
    description: |
      Conflict. 
      The request could not be completed due to a conflict with the current state of the target resource.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  429:
    description: Too many requests.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
### Added for CR270: Handling for deprecated entry points 
      Warning:
        type: string
        description: |
          Warning header.
          This header can be used by the server to inform the client of a deprecated entry-point through the value "299" value and a descriptive message.
  500:
    description: Internal server error.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
  501:
    description: |
      Not Implemented. 
      This code should be used when the entry point is implemented but cannot provide a result, given the context.
      When the entry point is not implemented at all, HTTP400 will be returned.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response
  503:
    description: Service unavailable.
    schema:
      $ref: '#/definitions/ErrorModel'
    headers:
      X-Request-ID:
        type: string
        description: |
          Correlation header to be set in a request and retrieved in the relevant response

definitions:

## technical structures definitions
  ErrorModel:
    description: Generic error report structure
    type: object
    required:
      - status
      - message
    properties:
      timestamp:
        description: current timestamp
        type: string
        format: date-time        
      status:
        description: HTTP error code
        type: integer
        format: int32
      error:
        description: HTTP error text
        type: string
        maxLength: 140
      message:
        description: HTTP textual reason phrase
        type: string
        maxLength: 140
      path:
        description: Relevant path that was used
        type: string
        maxLength: 140
    example:
      {
        "timestamp" : "2018-03-30T16:06:27.499+0000",
        "status" : 400,
        "error" : "Bad Request",
        "message" : "Missing request header 'Digest' for method parameter of type String",
        "path" : "/v1/accounts"
      }

## HAL structures definitions
### Modified for alignment with ISO20022 definition
### Modified for CR333 Increase href length in hyperlinks
  GenericLink:
    x-generic: true
    description: hypertext reference
    type: object
    required:
    - href
    properties:
      href: 
        description: URI to be used. HREF stands for Hypertext REFerence.
        type: string
        maxLength: 2000
      templated:
        description: specifies "true" if href is a URI template, i.e. with parameters. Otherwise, this property is absent or set to false
        type: boolean 
    example:
      {
        "href" : "v1/accounts/Alias1/balances",
      }
        
  PsuContextLinks:
    description: |
      Links that can be used for further navigation when browsing Account Information at top level
      - self: link to the list of all available accounts
    type: object
    readOnly: true
    required:
    - self
    properties:
      self:  
        $ref: '#/definitions/GenericLink'
      endUserIdentity:  
        $ref: '#/definitions/GenericLink'
      beneficiaries:  
        $ref: '#/definitions/GenericLink'
      first:
        $ref: '#/definitions/GenericLink'
      last:
        $ref: '#/definitions/GenericLink'
      next:
        $ref: '#/definitions/GenericLink'
      prev:
        $ref: '#/definitions/GenericLink'
    example:
      {
        "self": {
          "href": "v1/accounts?page=2"
        },
        "first": {
          "href": "v1/accounts"
        },
        "last": {
          "href": "v1/accounts?page=last",
          "templated": true
        },
        "next": {
          "href": "v1/accounts?page=3",
          "templated": true
        },
        "prev": {
          "href": "v1/accounts",
          "templated": true
        }
      }
        
  AccountLinks:
    description: |
      links that can be used for further navigation when browsing Account Information at one account level
      | Link | Description |
      | ---- | ----------- |
      | balances | link to the balances of a given account |
      | transactions | link to the transactions of a given account |
    type: object
    readOnly: true
    properties:
      balances:
        $ref: '#/definitions/GenericLink'
      transactions:
        $ref: '#/definitions/GenericLink'
    example:
      {
        "balances": {
          "href": "v1/accounts/Alias1/balances-report"
        },
        "transactions": {
          "href": "v1/accounts/Alias1/transactions"
        }
      }

  BalancesLinks:
    description: |
      links that can be used for further navigation when browsing Account Information at one account level
      | Link | Description |
      | ---- | ----------- |
      | self | link to the balances of a given account |
      | parent-list | link to the list of all available accounts |
      | transactions | link to the transactions of a given account |
    type: object
    readOnly: true
    required:
      - self
    properties:
      self:
        $ref: '#/definitions/GenericLink'
      parent-list:
        $ref: '#/definitions/GenericLink'
      transactions:
        $ref: '#/definitions/GenericLink'
    example:
      {
        "self": {
          "href": "v1/accounts/Alias1/balances-report"
        },
        "parent-list": {
          "href": "v1/accounts"
        },
        "transactions": {
          "href": "v1/accounts/Alias1/transactions"
        }
      }    

  TransactionsLinks:
    description: |
      links that can be used for further navigation when browsing Account Information at one account level
      | Link | Description |
      | ---- | ----------- |
      | self | link to the transactions of a given account |
      | parent-list | link to the list of all available accounts |
      | balances | link to the balances of a given account |
      | first | link to the first page of the transactions result |
      | last | link to the last page of the transactions result |
      | next | link to the next page of the transactions result |
      | prev | link to the previous page of the transactions result |
    type: object
    readOnly: true
    required:
      - self
    properties:
      self:
        $ref: '#/definitions/GenericLink'
      parent-list:
        $ref: '#/definitions/GenericLink'
      balances:
        $ref: '#/definitions/GenericLink'
      first:
        $ref: '#/definitions/GenericLink'
      last:
        $ref: '#/definitions/GenericLink'
      next:
        $ref: '#/definitions/GenericLink'
      prev:
        $ref: '#/definitions/GenericLink'
    example:
      {
        "self" : {
          "href" : "v1/accounts/Alias1/transactions",
        },
        "parent-list" : {
          "href" : "v1/accounts",
        },
        "balances" : {
          "href" : "v1/accounts/Alias1/balances",
        },
        "last" : {
          "href" : "v1/accounts/sAlias1/transactions?page=last",
        },
        "next" : {
          "href" : "v1/accounts/Alias1/transactions?page=3",
        },
     }

  EndUserIdentityLinks:
    description: |
      links that can be used for further navigation when browsing Account Information at one account level
      | Link | Description |
      | ---- | ----------- |
      | self | link to the end-user identity |
      | parent-list | link to the list of all available accounts |
    type: object
    readOnly: true
    required:
      - self
    properties:
      self:
        $ref: '#/definitions/GenericLink'
      parent-list:
        $ref: '#/definitions/GenericLink'
    example:
      {
        "self" : {
          "href" : "v1/end-user-identity",
        },
        "parent-list" : { 
          "href" : "v1/accounts",
        }
      }

  BeneficiariesLinks:
    description: |
      links that can be used for further navigation when browsing Account Information at one account level
      | Link | Description |
      | ---- | ----------- |
      | self | link to the beneficiaries |
      | parent-list | link to the list of all available accounts |
      | first | link to the first page of the beneficiaries result |
      | last | link to the last page of the beneficiaries result |
      | next | link to the next page of the beneficiaries result |
      | prev | link to the previous page of the beneficiaries result |
    type: object
    readOnly: true
    required:
      - self
    properties:
      self:
        $ref: '#/definitions/GenericLink'
      parent-list:
        $ref: '#/definitions/GenericLink'
      first:
        $ref: '#/definitions/GenericLink'
      last:
        $ref: '#/definitions/GenericLink'
      next:
        $ref: '#/definitions/GenericLink'
      prev:
        $ref: '#/definitions/GenericLink'
    example:
      {
        "self" : {
          "href" : "v1/beneficiaries",
        },
        "parent-list" : {
          "href" : "v1/accounts",
        },
        "last" : {
          "href" : "v1/beneficiaries?page=last",
        },
        "next" : {
          "href" : "v1/beneficiaries?page=3",
        },
     }

  PaymentRequestLinks:
    description: |
      links that can be used for further navigation when having post a Payment Request in order to get the relevant status report.
    type: object
    readOnly: true
    properties:
      request:
        $ref: '#/definitions/GenericLink'
        description: |
          This link provides the payment-request URL for retrieving or modifying
      confirmation:
        description: |
          This link shall not be provided when the confirmation was already posted.
        $ref: '#/definitions/GenericLink'
    example:
      {
        "self" : {
          "href" : "v1/payment-requests/MyPmtInfRscId",
        },
        "confirmation" : {
          "href" : "v1/payment-requests/MyPmtInfRscId/confirmation",
        },
      }

  PaymentCoverageReportLinks:
    description: |
      links that can be used for further navigation to post another coverage request.
    type: object
    readOnly: true
    required:
      - self   
    properties:
      self:
        $ref: '#/definitions/GenericLink'
    example:
      {
        "self" : {
          "href" : "v1/funds-confirmations",
        }
      }
      
  PaymentRequestResourceCreationLinks:
    description: |
      links that can be used for further navigation, especially in REDIRECT approach 
    type: object
    readOnly: true
    properties:
      consentApproval:
        $ref: '#/definitions/GenericLink'
        description: URL to be used by the PISP in order to start the ASPSP authentication and consent management process
    example:
      {
        "consentApproval" : {
          "href" : "https://psd2.aspsp/consent-approval",
        }
      }
        
## ISO20022 building blocks
### Modified for CR293: allow "NONE" authentication approach
### Modified for CR324: Rename "EMBEDDED" to "EMBEDDED-1-FACTOR"
  AppliedAuthenticationApproach:
    description: |
      The ASPSP, based on the authentication approaches proposed by the PISP, choose the one that it can processed, in respect with the preferences and constraints of the PSU and indicates in this field which approach has been chosen.
      It may happen that the ASPSP considers that, in case of payment cancellation request, there is no need for authentication and will then return "NONE".
    type: string 
    enum:
      - REDIRECT
      - DECOUPLED
      - EMBEDDED-1-FACTOR
      - NONE
    readOnly: true 
    example:
      "REDIRECT" 
  
  GenericIdentification:
    x-generic: true
    description: |
      ISO20022: Unique identification of an account, a person or an organisation, as assigned by an issuer.
      API: The ASPSP will document which account reference type it will support.
    type: object
    required:
      - identification
      - schemeName
    properties:
      identification: 
        description: |
          API: Identifier
        type: string
        maxLength: 70
      schemeName:
        description: |
          Name of the identification scheme.
          Possible values for the scheme name, partially based on ISO20022 external code list, are the following:
          | Code | Name | Description |
          | ---- | ---- | ----------- |
          | BANK | BankPartyIdentification | Unique and unambiguous assignment made by a specific bank or similar financial institution to identify a relationship as defined between the bank and its client. |
          | COID | CountryIdentificationCode) : Country authority given organisation identification (e.g., corporate registration number) |
          | SREN | SIREN | The SIREN number is a 9 digit code assigned by INSEE, the French National Institute for Statistics and Economic Studies, to identify an organisation in France. |
          | SRET | SIRET | The SIRET number is a 14 digit code assigned by INSEE, the French National Institute for Statistics and Economic Studies, to identify an organisation unit in France. It consists of the SIREN number, followed by a five digit classification number, to identify the local geographical unit of that entity. |
          | NIDN | NationalIdentityNumber | Number assigned by an authority to identify the national identity number of a person. |
          Other values are also permitted, for instance:
          | Code | Name | Description |
          | ---- | ---- | ----------- |
          | OAUT | OAUTH2 | OAUTH2 access token that is owned by the PISP being also an AISP and that can be used in order to identify the PSU |
          | CPAN | CardPan | Card PAN |
          Each implementation of the STET PSD2 API must specify in its own documentation which schemes can actually been used
        type: string
        maxLength: 70  
      issuer: 
        description: |
          ISO20022: Entity that assigns the identification. this could a country code or any organisation name or identifier that can be recognized by both parties
        type: string
        maxLength: 35
    example:
      {
         "identification" : "12FR5",
         "schemeName" : "COID",
         "issuer" : "FR",
       }

  AccountIdentification:
    x-generic: true
    description: Unique and unambiguous identification for the account between the account owner and the account servicer.
    type: object
    properties:
      iban:
        description: |
          ISO20022: International Bank Account Number (IBAN) - identification used internationally by financial institutions to uniquely identify the account of a customer. 
          
          Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 "Banking and related financial services - International Bank Account Number (IBAN)" version 1997-10-01, or later revisions.
        type: string
        pattern: '^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$'
      other:
        $ref: '#/definitions/GenericIdentification'
      currency:
        description: Currency used for the account
        $ref: '#/definitions/CurrencyCode'
    example:
      {
        "iban" : "YY64COJH41059545330222956960771321",
      }
    
  CurrencyCode:
    description: |
      Specifies the currency of the amount or of the account. 
      A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". 
    type: string
    pattern: '^[A-Z]{3,3}$'
    example:
        "EUR"
          
### Modified for alignment with ISO20022 definition
  AmountType:
    description: |
      Structure aiming to embed the amount and the currency to be used.
    type: object
    required:
      - amount
      - currency
    properties:
      amount:
        description: |
          ISO20022: Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        type: number
        format: float
        pattern: '^\-{0,1}[0-9]{1,13}(\.[0-9]{0,5}){0,1}$'
      currency:
        $ref: '#/definitions/CurrencyCode'
### Modified for CR282: Set amount type to number
    example:
      {
        "currency": "EUR",
        "amount": "12.25"
      }
        
### Added for CR219: Add an equivalent amount
### Modified for alignment with ISO20022 definition
  EquivalentAmountType:
    description: |
      Structure aiming to embed the amount and the currency to be used.
      The currency of transfer should be set.  
    type: object
    required:
      - amount
      - currency
      - currencyOfTransfer
    properties:
      amount:
        description: |
          ISO20022: Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        type: number
        format: float
        pattern: '^\-{0,1}[0-9]{1,13}(\.[0-9]{0,5}){0,1}$'
      currency:
        $ref: '#/definitions/CurrencyCode'
      currencyOfTransfer:
        $ref: '#/definitions/CurrencyCode'
    example:
      {
        "currency": "EUR",
        "currencyOfTransfer": "USD",
        "amount": "12.25"
      }
         
  ClearingSystemMemberIdentification:
    description: |
      ISO20022: Information used to identify a member within a clearing system.
      API: to be used for some specific international credit transfers in order to identify the beneficiary bank
    type: object
    properties:
      clearingSystemId:
        description: |
          ISO20022: Specification of a pre-agreed offering between clearing agents or the channel through which the payment instruction is processed.
        type: string
        maxLength: 35
      memberId:
        description: |
          ISO20022: Identification of a member of a clearing system.
        type: string
        maxLength: 35
    example: |
      {
        "clearingSystemId" : "NZNCC",
        "memberId" : "020368"
      }  

  FinancialInstitutionIdentification:
    x-generic: true
    description: |
      ISO20022: Unique and unambiguous identification of a financial institution, as assigned under an internationally recognised or proprietary identification scheme.
    type: object
    required:
      - bicFi
    properties:
      bicFi: 
        description: |
          ISO20022: Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identification code (BIC)".
        type: string
        pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$'
      clearingSystemMemberId:
        $ref: '#/definitions/ClearingSystemMemberIdentification'
      name: 
        type: string
        description: Name of the financial institution
        maxLength: 140
      postalAddress:
        $ref: '#/definitions/PostalAddress'        
    example:
      {
        "bicFi" : "BNKAFRPPXXX",
      }
        
### Modified for CR267: Modify the Address structure
### Modified for CR332: Add an alternate structured address
  PostalAddress:
    description: |
      ISO20022: Information that locates and identifies a specific address, as defined by postal services.
    type: object
    required:
      - country
      - addressLine
    properties:
      addressType:
        description: |
          ISO20022: Identifies the nature of the postal address. 
          API: Cannot be used for SEPA payments. Proprietary codes can be specified and documented if needed.
          | Code | Name | Description |
          | ---- | ---- | ----------- |
          | BIZZ | Business | Address is the business address |
          | DLVY | Delivery | Address is the address to which delivery is to take place |
          | MLTO | Mail To | Address is the  address to which mail is sent |
          | PBOX | PO Box | Address is is a postal office (PO) box |
          | ADDR | Postal | Address is the complete postal address |
          | HOME | Business | Address is the home address |
        type: string
        enum:
          - BIZZ
          - DLVY
          - MLTO
          - PBOX
          - ADDR
          - HOME  
      department:
        description: |
          ISO20022: Identification of a division of a large organisation or building.
          API: Cannot be used for SEPA payments.
        type: string
        maxLength: 70   
      subDepartment:
        description: |
          ISO20022: Identification of a sub-division of a large organisation or building.
          API: Cannot be used for SEPA payments.
        type: string
        maxLength: 70   
      streetName:
        description: |
          ISO20022: Name of a street or thoroughfare.
          API: Cannot be used for SEPA payments.
        type: string
        maxLength: 70   
      buildingNumber:
        description: |
          ISO20022: Number that identifies the position of a building on a street.
          API: Cannot be used for SEPA payments.
        type: string
        maxLength: 16   
      buildingName:
        description: |
          ISO20022: Name of the building or house.
          API: Cannot be used for SEPA payments.
        type: string
        maxLength: 16   
      postCode:
        description: |
          ISO20022: Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
          API: Cannot be used for SEPA payments.
        type: string
        maxLength: 16   
      townName:
        description: |
          ISO20022: Name of a built-up area, with defined boundaries, and a local government.
          API: Cannot be used for SEPA payments.
        type: string
        maxLength: 35   
      countrySubDivision:
        description: |
          ISO20022: Identifies a subdivision of a country such as state, region, county.
          API: Cannot be used for SEPA payments.
        type: string
        maxLength: 35   
      country:
        description: |
          ISO20022: Country in which a person resides (the place of a person's home). In the case of a company, it is the country from which the affairs of that company are directed.
        type: string
        pattern: '^([A-Z]{2,2})$'        
      addressLine:
        description: |
          Unstructured address. The lines must embed zip code and town name.
          For SEPA payments, only two address lines are allowed.
        type: array
        maxItems: 7
        items:
          description: Address line
          type: string
          maxLength: 70
    example:
      {
        "country" : "FR",
        "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ],
      }
     
### Added for CR268: Allow the setting of date of birth and city of birth for the beneficiary identification
  DateAndPlaceOfBirth:
    description: |
      Date and place of birth of a person.
      This information must be requested for detection of Fraud, Money-Laundering and Terrorism Financing in case of international payment. 
    type: object
    required:
      - birthDate
      - cityOfBirth
      - countryOfBirth
    properties:
      birthDate:
        description: Date on which a person is born.
        type: string
        format: date
      cityOfBirth:
        description: City where a person was born.
        type: string
        maxLength: 35
      countryOfBirth:
        description: Country where a person was born.
        type: string
        pattern: '^[A-Z]{2,2}$'
    
### Modified for CR268: Allow the setting of date of birth and city of birth for the beneficiary identification
  PartyIdentification:
    x-generic: true
    description: |
      API : Description of a Party which can be either a person or an organization.
    type: object
    required:
      - name
    properties:
      name:
        description: |
          ISO20022: Name by which a party is known and which is usually used to identify that party.
        type: string
        maxLength: 140
      dateAndPlaceOfBirth:
        $ref: '#/definitions/DateAndPlaceOfBirth'
      postalAddress:
        $ref: '#/definitions/PostalAddress'
      organisationId:
        description: Unique and unambiguous way to identify an organisation.
        $ref: '#/definitions/GenericIdentification'
      privateId:
        description: Unique and unambiguous identification of a person.
        $ref: '#/definitions/GenericIdentification'
    example:
      {
        "name" : "MyPreferredPisp",
        "postalAddress" : {
          "country" : "FR",
          "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ],
        }
      }
      
### Modified for CR314: Allign Resource Id to 36 characters (UUID)
  ResourceId:
    description: |
      API: Identifier assigned by the ASPSP for further use of the created resource through API calls. 
      The API client cannot set or modify the value of this field.
    type: string
    pattern: '^([a-zA-Z0-9 /\-?:\()\.,'']{1,36})$'
    readOnly: true
    example:
      "MyInstrRscId"
      
### Modified for CR314: Allign Resource Id to 36 characters (UUID)
  PaymentIdentification:
    description: |
      ISO20022: Set of elements used to reference a payment instruction.
    type: object
    required:
      - instructionId
    properties:
      resourceId:
        readOnly: true
        $ref: '#/definitions/ResourceId'
      instructionId:   
        description: |
          ISO20022: Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
          
          API: Unique identification shared between the PISP and the ASPSP 
        type: string
        pattern: '^([a-zA-Z0-9 /\-?:\()\.,'']{1,36})$'
      endToEndId:
        description: |
          ISO20022: Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        type: string
        pattern: '^([a-zA-Z0-9 /\-?:\()\.,'']{1,36})$'
    example:
      {
        "resourceId" : "MyInstrRscId",
        "instructionId" : "MyInstrId",
        "endToEndId" : "MyEndToEndId",
      }
        
  PriorityCode:
    description: |
      ISO20022: Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
      API: This field is useless for SCTInst and thus should be ignored.
    type: string
    enum:
      - HIGH
      - NORM
    example:
      "NORM"
      
  CategoryPurposeCode:
    description: |
      ISO20022: Specifies the high level purpose of the instruction based on a set of pre-defined categories. This is used by the initiating party to provide information concerning the processing of the payment. It is likely to trigger special processing by any of the agents involved in the payment chain.
      API: The following values are allowed:
      | Code | Name | Description |
      | ---- | ---- | ---------- |
      | CASH | CashManagementTransfer | Transaction is a general cash management instruction. |
      | CORT | TradeSettlementPayment | Transaction is related to settlement of a trade, e.g. a foreign exchange deal or a securities transaction. |
      | DVPM | DeliverAgainstPayment | Code used to pre-advise the account servicer of a forthcoming deliver against payment instruction. |  
      | INTC | IntraCompanyPayment | Transaction is an intra-company payment, i.e. a payment between two companies belonging to the same group. |  
      | TREA | TreasuryPayment | Transaction is related to treasury operations.  E.g. financial contract settlement. |  
    type: string
    enum:
      - CASH
      - CORT
      - DVPM
      - INTC
      - TREA
    example:
      "CASH"
          
  ServiceLevelCode:
    description: |
      ISO20022: Agreement under which or rules under which the transaction should be processed. Specifies a pre-agreed service or level of service between the parties, as published in an external service level code list.
      API: Only "SEPA" (SEPA Credit Transfer) value is allowed
    type: string
    enum:
      - SEPA      
    example:
      "SEPA"

  LocalInstrumentCode:
    description: |
      ISO20022: User community specific instrument. 
      Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
      API: "INST" value is to be used in order to ask for an SEPA instant Payment (SCTInst). 
      For International payments, this field may be valued with one of the ISO20022 external code to specify with payment instrument should be used by the creditor's bank. 
    type: string
    example:
      "INST"

  PaymentTypeInformation:
    description: |
      ISO20022: Set of elements used to further specify the type of transaction.
    type: object
    properties:
      instructionPriority:
        $ref: '#/definitions/PriorityCode'
      serviceLevel:
        $ref: '#/definitions/ServiceLevelCode'
      localInstrument:
        $ref: '#/definitions/LocalInstrumentCode'
      categoryPurpose:
        $ref: '#/definitions/CategoryPurposeCode'
    example:
      {
        "serviceLevel" : "SEPA",
        "localInstrument" : "INST",
        "categoryPurpose" : "DVPM",
      }
        
  PurposeCode:
    description: |
      ISO20022: Underlying reason for the payment transaction, as published in an external purpose code list.    
      API: The following values are allowed for Payment  Request
      | Code | Name | Description |
      | ---- | ---- | ---------- |
      | ACCT | AccountManagement | Funds moved between 2 accounts of same account holder at the same bank) |
      | CASH | CashManagementTransfer | (general cash management instruction) may be used for Transfer Initiation |
      | COMC | CommercialPayment | Transaction is related to a payment of commercial credit or debit. |
      | CPKC | CarparkCharges | General Carpark Charges Transaction is related to carpark charges. |
      | TRPT | RoadPricing | Transport RoadPricing Transaction is for the payment to top-up pre-paid card and electronic road pricing for the purpose of transportation. |
    type: string
    enum:
      - ACCT
      - CASH
      - COMC
      - CPKC
      - TRPT
    example:
      "CPKC"
      
  ChargeBearerCode:
    description: |
      ISO20022: Specifies which party/parties will bear the charges associated with the processing of the payment transaction.    
      The following values are allowed:
      | Code | Name | Description |
      | ---- | ---- | ---------- |
      | DEBT | BorneByDebtor | All transaction charges are to be borne by the debtor. |
      | CRED | BorneByCreditor | All transaction charges are to be borne by the creditor. |
      | SHAR | Shared | In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor. |
      | SLEV | FollowingServiceLevel | Charges are to be applied following the rules agreed in the service level and/or scheme. |
    type: string
    enum:
      - DEBT
      - CRED
      - SHAR
      - SLEV
    example:
      "SLEV"
      
### Added for CR42: Management of a remittance Structured type information
### Added for CR42: Management of a remittance Structured type information
  CodeAndIssuer:
    description: |
      Specifies a code and the issuer of this code.
    type: object
    required:
      - code
    properties:
      code: 
        description: Provides the code.
        type: string
        maxLength: 4
      issuer:
        description: Identification of the issuer of the code.
        type: string
        maxLength: 35
      
### Added for CR42: Management of a remittance Structured type information
  DocumentLineIdentification:
    description: Provides identification of the document line.
    type: object
    properties:
      type:
        description: |
          Specifies the type of referred document type.
        $ref: '#/definitions/CodeAndIssuer'
      number:
        description: Unique and unambiguous identification of the referred document line.
        type: string
        maxLength: 35       
      relatedDate:
        description: Date associated with the referred document line.
        type : string
        format: date
  
### Added for CR42: Management of a remittance Structured type information
  TypedAmount:
    description: Typed Amount
    type: object
    required:
      - amount
    properties:
      type:
        description: Type of the amount
        type: string
        maxLength: 35
      amount: 
        $ref: '#/definitions/AmountType'
  
### Added for CR42: Management of a remittance Structured type information
  DocumentAdjustment:
    description: Specifies detailed information on the amount and reason of the adjustment.
    type: object
    required:
      - amount
    properties:
      amount: 
        $ref: '#/definitions/AmountType'
      creditDebitIndicator:
        $ref: '#/definitions/CreditDebitIndicator'
      reason:
        description: Specifies the reason for the adjustment.
        type: string
        maxLength: 4
      additionalInformation:
        description: Provides further details on the document adjustment.
        type: string
        maxLength: 140
  
### Added for CR42: Management of a remittance Structured type information
  RemittanceAmount:
    description: Provides details on the amounts of the document line.
    type: object
    properties:
      duePayableAmount:
        description: Amount specified is the exact amount due and payable to the creditor.
        $ref: '#/definitions/AmountType'
      discountAppliedAmount:
        description: Amount of discount to be applied to the amount due and payable to the creditor.
        $ref: '#/definitions/TypedAmount'
      creditNoteAmount:
        description: Amount of a credit note.
        $ref: '#/definitions/AmountType'
      taxAmount:
        description: Amount of the tax.
        $ref: '#/definitions/TypedAmount'
      adjustmentAmountAndReason:
        description: Specifies detailed information on the amount and reason of the adjustment.
        $ref: '#/definitions/DocumentAdjustment'
      remittedAmount:
        description: Amount of money remitted.
        $ref: '#/definitions/AmountType'
        
### Added for CR42: Management of a remittance Structured type information
  LineDetail:
    description: Set of elements used to provide the content of the referred document line.
    type: object
    properties:
      identification:
        $ref: '#/definitions/DocumentLineIdentification'
      description:
        description: Description associated with the document line.
        type: string
        maxLength: 2048
      amount:
        $ref: '#/definitions/RemittanceAmount'
        
### Added for CR42: Management of a remittance Structured type information
  ReferredDocumentInformation:
    description: Provides the identification and the content of the referred document.
    type: object
    properties:
      type:
        $ref: '#/definitions/CodeAndIssuer'
      number:
        description: Unique and unambiguous identification of the referred document.
        type: string
        maxLength: 35       
      relatedDate:
        description: Date associated with the referred document.
        type : string
        format: date
      lineDetails:
        description: Sets of elements used to provide the content of the referred document line.
        type: array
        items: 
          $ref: '#/definitions/LineDetail'
      
### Added for CR42: Management of a remittance Structured type information
  ReferredDocumentInformations:
    description: |
      Provides the identification and the content of the referred documents.
    type: array
    items:
      $ref: '#/definitions/ReferredDocumentInformation'
  
### Added for CR42: Management of a remittance Structured type information
  CreditorReferenceInformation:
    description: Reference information provided by the creditor to allow the identification of the underlying documents.
    type: object
    properties:
      type:
        $ref: '#/definitions/CodeAndIssuer'
      reference:
        description: Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.    
        type: string
        maxLength: 35
  
### Added for CR42: Management of a remittance Structured type information
  TitleAndName:
    description: Title and Name of the party or the party's authorised reprensentative.
    type: object
    properties:
      title:
        description: Title or position of the party or the party's authorised reprensentative.
        type: string
        maxLength: 35
      name:
        description: Name of the party or the party's authorised reprensentative.
        type: string
        maxLength: 140
  
### Added for CR42: Management of a remittance Structured type information
  TaxParty:
    description: Set of elements used to identify a party of the transaction to which the tax applies.
    type: object
    properties:
      taxIdentification:
        description: Tax identification number of the party.
        type: string
        maxLength: 35
      registrationIdentification:
        description: Unique identification, as assigned by an organisation, to unambiguously identify a party.
        type: string
        maxLength: 35
      taxType:        
        description: Type of tax payer.
        type: string
        maxLength: 35
      authorisation:
        description: Details of the authorised tax paying party.
        $ref: '#/definitions/TitleAndName'        
  
### Added for CR42: Management of a remittance Structured type information
  TaxRecordPeriodCode:
    description: |
      Identification of the period related to the tax payment.
      | Code | Description |
      | ---- | ---------- |
      | MM01 | FirstMonth Tax is related to the second month of the period. |
      | MM02 | SecondMonth Tax is related to the first month of the period. |
      | MM03 | ThirdMonth Tax is related to the third month of the  period. |
      | MM04 | FourthMonth Tax is related to the fourth month of the period. |
      | MM05 | FifthMonth Tax is related to the fifth month of the period. |
      | MM06 | SixthMonth Tax is related to the sixth month of the period. |
      | MM07 | SeventhMonth Tax is related to the seventh month of the period. |
      | MM08 | EighthMonth Tax is related to the eighth month of the period. |
      | MM09 | NinthMonth Tax is related to the ninth month of the period. |
      | MM10 | TenthMonth Tax is related to the tenth month of the period. |
      | MM11 | EleventhMonth Tax is related to the eleventh month of the period. |
      | MM12 | TwelfthMonth Tax is related to the twelfth month of the period. |
      | QTR1 | FirstQuarter Tax is related to the first quarter of the period. |
      | QTR2 | SecondQuarter Tax is related to the second quarter of the period. |
      | QTR3 | ThirdQuarter Tax is related to the third quarter of the period. |
      | QTR4 | FourthQuarter Tax is related to the fourth quarter of the period. |
      | HLF1 | FirstHalf Tax is related to the first half of the period. |
      | HLF2 | SecondHalf Tax is related to the second half of the period. |
    type: string
    enum:
      - MM01
      - MM02
      - MM03
      - MM04
      - MM05
      - MM06
      - MM07
      - MM08
      - MM09
      - MM10
      - MM11
      - MM12
      - QTR1
      - QTR2
      - QTR3
      - QTR4
      - HLF1
      - HLF2
       

### Added for CR42: Management of a remittance Structured type information
  TaxPeriod:
    description: Set of elements used to provide details on the period of time related to the tax payment.
    type: object
    properties:
      year:
        description: Year related to the tax payment.
        type: string
        format: int32
      type:
        description: Identification of the period related to the tax payment.
        $ref: '#/definitions/TaxRecordPeriodCode'
      fromDate:
        description: Start date of the range.
        type: string
        format: date
      toDate:
        description: End date of the range.
        type: string
        format: date
  
### Added for CR42: Management of a remittance Structured type information
  PercentageRate:
    description: Rate expressed as a percentage, ie, in hundredths, eg, 0.7 is 7/10 of a percent, and 7.0 is 7%.
    type: number
    format: float
    
### Added for CR42: Management of a remittance Structured type information
  TaxRecordDetails:
    description: Elements used to provide details on the tax period and amount.
    type: object
    required:
      - amount
    properties:
      period:
        description: Set of elements used to provide details on the period of time related to the tax payment.
        $ref: '#/definitions/TaxPeriod'     
      amount:
        description: Underlying tax amount related to the specified period.      
        $ref: '#/definitions/AmountType'
  
### Added for CR42: Management of a remittance Structured type information
  TaxAmount:
    description: Set of elements used to provide information on the amount of the tax record.
    type: object
    properties:
      rate: 
        description: Rate used to calculate the tax.
        $ref: '#/definitions/PercentageRate'   
      taxableBaseAmount:
        description: Amount of money on which the tax is based.  
        $ref: '#/definitions/AmountType'
      totalAmount:
        description: Total amount that is the result of the calculation of the tax for the record.   
        $ref: '#/definitions/AmountType'
      details:
        description: Set of elements used to provide details on the tax period and amount.
        type: array
        items:       
          $ref: '#/definitions/TaxRecordDetails'
  
### Added for CR42: Management of a remittance Structured type information
  TaxRecord:
    description: Record of tax details
    type: object
    properties:
      type: 
        description: High level code to identify the type of tax details.
        type: string
        maxLength: 35
      category: 
        description: Specifies the tax code as published by the tax authority.
        type: string
        maxLength: 35
      categoryDetails: 
        description: Provides further details of the category tax code.
        type: string
        maxLength: 35
      debtorStatus:
        description: Code provided by local authority to identify the status of the party that has drawn up the settlement document.
        type: string
        maxLength: 35
      certificateIdentification:
        description: Identification number of the tax report as assigned by the taxing authority.
        type: string
        maxLength: 35
      formsCode:
        description: Identifies, in a coded form, on which template the tax report is to be provided.
        type: string
        maxLength: 35
      period:
        description: Set of elements used to provide details on the period of time related to the tax payment.
        $ref: '#/definitions/TaxPeriod'     
      taxAmount:
        description: Set of elements used to provide information on the amount of the tax record.
        $ref: '#/definitions/TaxAmount'     
      additionalInformation:
        description: Further details of the tax record.
        type: string
        maxLength: 140
  
### Added for CR42: Management of a remittance Structured type information
  TaxInformation:
    description: Details about tax paid, or to be paid, to the government in accordance with the law, including pre-defined parameters such as thresholds and type of account.
    type: object
    properties:
      creditor:
        $ref: '#/definitions/TaxParty'
      debtor:
        $ref: '#/definitions/TaxParty'
      ultimateDebtor:
        $ref: '#/definitions/TaxParty'
      administrationZone:
        description: Territorial part of a country to which the tax payment is related.
        type: string
        maxLength: 35
      referenceNumber:
        description: Tax reference information that is specific to a taxing agency.
        type: string
        maxLength: 140
      method:
        description: Method used to indicate the underlying business or how the tax is paid.
        type: string
        maxLength: 35
      totalTaxableBaseAmount:
        description: Total amount of money on which the tax is based.
        $ref: '#/definitions/AmountType'
      totalTaxAmount:
        description: Total amount of money as result of the calculation of the tax.
        $ref: '#/definitions/AmountType'
      date: 
        description: Date by which tax is due.
        type: string
        format: date 
      sequenceNumber:
        description: Sequential number of the tax report.
        type: number
        format: int32
      record:
        description: Records of tax details
        type: array
        items:
          $ref: '#/definitions/TaxRecord'
  
### Added for CR42: Management of a remittance Structured type information
  StructuredRemittanceInformation:
    x-generic: true
    description: |
      Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in a structured form.
    type: object
    properties:
      referredDocumentInformation:
        $ref: '#/definitions/ReferredDocumentInformations'
      referredDocumentAmount:
        $ref: '#/definitions/RemittanceAmount'
      creditorReferenceInformation:
        $ref: '#/definitions/CreditorReferenceInformation'
      invoicer:
        $ref: '#/definitions/PartyIdentification'
      invoicee:
        $ref: '#/definitions/PartyIdentification'
      taxRemittance:
        $ref: '#/definitions/TaxInformation'

### Modified for CR42: Management of a remittance Structured type information
### Modified for alignment with ISO20022 definition
  RemittanceInformation:
    description: |
      ISO20022: Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
      API: 
      - Only one occurrence of the unstructured information is allowed.
      - Only one occurrence of the structured information is allowed.
      - Structured and unstructured information can coexist.
    type: object
    properties:
      unstructured:
        type: array
        description: Unstructured remittance information
        items:
          type: string
          description: Relevant information to the transaction
          title: remittanceLine
          maxLength: 140
      structured:
        description: Structured remittance information
        type: array
        items:
          $ref: '#/definitions/StructuredRemittanceInformation'
          
### Modified for CR320: Add a new payment request status for partially signed request
### Modified for CR322: Add a new payment/transaction status for cancellation
  PaymentInformationStatusCode:
    x-generic: true
    description: |
      ISO20022: Specifies the status of the payment information.
      API: Mandatory. The following values are allowed to provide the status of the Payment Request 
      | Code | Name | Description |
      | ---- | ---- | ---------- |
      | ACCP | AcceptedCustomerProfile | Preceding check of technical validation was successful. Customer profile check was also successful. |
      | ACSC | AcceptedSettlementCompleted | Settlement on the debtor's account has been completed. |
      | ACSP | AcceptedSettlementInProcess | All preceding checks such as technical validation and customer profile were successful. Dynamic risk assessment is now also successful and therefore the Payment Request has been accepted for execution. |
      | ACTC | AcceptedTechnicalValidation | Authentication and syntactical and semantical validation are successful. |
      | ACWC | AcceptedWithChange | Instruction is accepted but a change will be made, such as date or remittance not sent. |
      | ACWP | AcceptedWithoutPosting | Payment instruction included in the credit transfer is accepted without being posted to the creditor customerâ€™s account. |
      | CANC | Cancelled | Payment initiation has been successfully cancelled after having received a request for cancellation. |
      | PART | PartiallyAccepted | A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status. |
      | PATC | PartiallyAcceptedTechnicalCorrect | Payment initiation needs multiple authentications, where some but not yet all have been performed. Syntactical and semantical validations are successful. |
      | RCVD | Received | Payment initiation has been received by the receiving agent. |
      | PDNG | Pending | Payment request or individual transaction included in the Payment Request is pending. Further checks and status update will be performed. |
      | RJCT | Rejected | Payment request  has been rejected. |
      ![](https://www.stet.eu//assets/files/documents-api/payment-request-status-1-4-2.png)
        
    type: string
    enum:
      - ACCP
      - ACSC
      - ACSP
      - ACTC
      - ACWC
      - ACWP
      - CANC
      - PART
      - RCVD
      - PDNG
      - RJCT
    example:
      "ACSC"

### Modified for CR288: Add an ACTC value for transaction status
### Modified for CR322: Add a new payment/transaction status for cancellation
  TransactionIndividualStatusCode:
    x-generic: true
    description: |
      ISO20022: Specifies the status of the payment information group.
      
      API: Only the following values are allowed to provide the status of the subsequent CREDIT TRANSFER to the Payment Request
      | Code | Name | Description |
      | ---- | ---- | ---------- |
      | ACSC | AcceptedSettlementCompleted | Settlement on the debtor's account has been completed. |
      | ACSP | AcceptedSettlementInProcess | All preceding checks such as technical validation and customer profile were successful and therefore the Payment Request has been accepted for execution. |
      | ACTC | AcceptedTechnicalValidation | Authentication and syntactical and semantical validation are successful. |
      | CANC | Cancelled | Payment initiation has been successfully cancelled after having received a request for cancellation. |
      | PDNG | Pending | Payment request or individual transaction included in the Payment Request is pending. Further checks and status update will be performed. |
      | RJCT | Rejected | Payment request or individual transaction included in the Payment Request has been rejected. |
      ![](https://www.stet.eu//assets/files/documents-api/transaction-status-1-4-2.png)
    type: string
    enum:
      - ACSC
      - ACSP
      - ACTC
      - CANC
      - PDNG
      - RJCT
    example:
      "ACSP"
      
### Modified for CR315: Add new reason codes for payment initiation cancellation by a PISP
  StatusReasonInformation:
    description: |
      ISO20022: Provides detailed information on the status reason.
      
      API: Can only be used in case the status is equal to "RJCT" or "CANC". Only the following values are allowed:
      | Code | Name | Description |
      | ---- | ---- | ---------- |
      | AC01 | IncorectAccountNumber | the account number is either invalid or does not exist
      | AC04 | ClosedAccountNumber | the account is closed and cannot be used
      | AC06 | BlockedAccount | the account is blocked and cannot be used
      | AG01 | Transaction forbidden | Transaction forbidden on this type of account
      | AM18 | InvalidNumberOfTransactions | the number of transactions exceeds the ASPSP acceptance limit
      | CH03 | RequestedExecutionDateOrRequestedCollectionDateTooFarInFuture | The requested execution date is too far in the future
      | CUST | RequestedByCustomer | The reject is due to the debtor: refusal or lack of liquidity
      | DS02 | OrderCancelled | An authorized user has cancelled the order
      | DUPL | DuplicatePayment | Payment is a duplicate of another payment. Can only be set by a PISP for a payment request cancellation.
      | FF01 | InvalidFileFormat | The reject is due to the original Payment Request which is invalid (syntax, structure or values)
      | FRAD | FraudulentOriginated | the Payment Request is considered as fraudulent
      | MS03 | NotSpecifiedReasonAgentGenerated | No reason specified by the ASPSP
      | NOAS | NoAnswerFromCustomer | The PSU has neither accepted nor rejected the Payment Request and a time-out has occurred
      | RR01 | MissingDebtorAccountOrIdentification | The Debtor account and/or Identification are missing or inconsistent 
      | RR03 | MissingCreditorNameOrAddress | Specification of the creditorâ€™s name and/or address needed for regulatory requirements is insufficient or missing.
      | RR04 | RegulatoryReason | Reject from regulatory reason
      | RR12 | InvalidPartyID | Invalid or missing identification required within a particular country or payment type.
      | TECH | TechnicalProblem | Technical problems resulting in an erroneous transaction. Can only be set by a PISP for a payment request cancellation.
       
    type: string
    enum:
      - AC01
      - AC04
      - AC06
      - AG01
      - AM18
      - CH03
      - CUST
      - DS02
      - FF01  
      - FRAD
      - MS03
      - NOAS
      - RR01
      - RR03
      - RR04
      - RR12
    example:
      "FRAD"
        
  RegulatoryReportingCode:
    description: |
      Information needed due to regulatory and statutory requirements. 
      Economical codes to be used are provided by the National Competent Authority
    type: string
    maxLength: 10
    example:
      "ECO456"

  RegulatoryReportingCodes:
    description: |
      List of needed regulatory reporting codes for international payments
    type: array
    items:
        $ref: '#/definitions/RegulatoryReportingCode'
    minItems: 1
    maxItems: 10
    example:
        ["ECO456","ECO457"]
      
  RequestedExecutionDate:
    description: |
      ISO20022: Date at which the initiating party requests the clearing agent to process the payment.
      API:  
      This field indicates the date at which the debtor account should be debited. 
      In most of the cases, especially for international payments, the date of the credit on the credit account cannot be set. Only SCTInst can guarantee having the same date for this credit. 
      This date can be used in the following cases:
      - the single requested execution date for a payment having several instructions. In this case, this field must be set at the payment level. 
      - the requested execution date for a given instruction within a payment. In this case, this field must be set at each instruction level. 
      - The first date of execution for a standing order.
      When the payment cannot be processed at this date, the ASPSP is allowed to shift the applied execution date to the next possible execution date for non-standing orders.
      For standing orders, the [executionRule] parameter helps to compute the execution date to be applied.
    type: string
    format: date-time
    example:
      "2019-02-01T00:00:00.000+01:00"

  EndDate:
    description: |
      The last applicable day of execution for a given standing order.
      If not given, the standing order is considered as endless.
    type: string
    format: date-time
    example:
      "2019-02-01T00:00:00.000+01:00"

  ExecutionRule:
    description: |
      Execution date shifting rule for standing orders
      This data attribute defines the behaviour when recurring payment dates falls on a weekend or bank holiday. 
      The payment is then executed either the "preceding" or "following" working day.
      ASPSP might reject the request due to the communicated value, if rules in Online-Banking are not supporting 
      this execution rule.
      | Code | Description |
      | ---- | ----------- |
      | FWNG | following |
      | PREC | preceding |
    type: string
    enum:
      - FWNG
      - PREC
    example:
      "FWNG"

  FrequencyCode:
    description: |
      Frequency rule for standing orders.
      The following codes from the "EventFrequency7Code" of ISO 20022 are supported.
      | Code | Description |
      | ---- | ----------- |
      | DAIL | Daily |
      | WEEK | Weekly |
      | TOWK | EveryTwoWeeks |
      | MNTH | Monthly |
      | TOMN | EveryTwoMonths |
      | QUTR | Quarterly |
      | SEMI | SemiAnnual |
      | YEAR | Annual |
      However, each ASPSP might restrict these values into a subset if needed. 
    type: string
    enum:
      - DAIL
      - WEEK
      - TOWK
      - MNTH
      - TOMN
      - QUTR
      - SEMI
      - YEAR
    example:
      "MNTH"

### Added for CR213: Adding exchange rate information for transactions
### Fix of type mismatch for unitCurrency
  ExchangeRate:
    description: Provides details on the currency exchange rate and contract.
    type: object
    properties:
      unitCurrency:
        description: Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        $ref: "#/definitions/CurrencyCode"
      exchangeRate:
        description: |
          The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        type: number
        format : float
      rateType:
        description: |
          Specifies the type used to complete the currency exchange.
          | Code | Name | Description |
          | ---- | ---- | ---------- |
          | SPOT | Spot | Exchange rate applied is the spot rate. |
          | SALE | Sale | Exchange rate applied is the market rate at the time of the sale. |
          | AGRD | Agreed | Exchange rate applied is the rate agreed between the parties. |
        type: string
        enum:
          - SPOT
          - SALE
          - AGRD
      contractIdentification:
        description: Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        type: string
        maxLength: 35
         
### Added for CR258: Add an optional InstructionForCreditorAgent structure
  InstructionForCreditorAgent:
    description: |
      Further information related to the processing of the payment instruction that may need to be acted upon by the creditor's agent. The instruction may relate to a level of service, or may be an instruction that has to be executed by the creditor's agent, or may be information required by the creditor's agent.
    type: object
    properties:
      code:
        description: Coded information related to the processing of the payment instruction, provided by the initiating party, and intended for the creditor's agent.
          | Code | Name | Description |
          | ---- | ---- | ---------- |
          | CHQB | PayCreditorByCheque | (Ultimate) creditor must be paid by cheque. |
          | HOLD | HoldCashForCreditor | Amount of money must be held for the (ultimate) creditor, who will call. Pay on identification. |
          | PHOB | PhoneBeneficiary | Please advise/contact (ultimate) creditor/claimant by phone. |
          | TELB | Telecom | Please advise/contact (ultimate) creditor/claimant by the most efficient means of telecommunication. |
        type: string
        enum:
          - CHQB
          - HOLD
          - PHOB
          - TELB
      instructionInformation:
        description: Further information complementing the coded instruction or instruction to the creditor's agent that is bilaterally agreed or specific to a user community.
        type: string
        maxLength: 140

### Added for CR269: Allow the specification of an intermediary agent
  IntermediaryAgent:
    description: Agent and agent account between the debtor's agent and the creditor's agent.
    type: object
    properties:
      agent:
        $ref: '#/definitions/PartyIdentification'
      agentAccount:
        $ref: '#/definitions/AccountIdentification'

### Modified for CR210: Add an equivalent amount
### Modified for CR213: Adding exchange rate information for transactions
### Modified for CR258: Add an optional InstructionForCreditorAgent structure
### Modified for CR263: Add an optional UltimateDebtor structure
### Modified for CR264: Add an optional ExchangeRateInformation structure
### Modified for CR266: Modify the Purpose structure
### Modified for CR269: Allow the specification of an intermediary agent
### Modified for CR312; Fix the multiplicity of instructedAMount 
  CreditTransferTransaction:
    description: |
      ISO20022: Payment processes required to transfer cash from the debtor to the creditor.
      API: 
    type: object
    required:
      - paymentId
    x-NotAllowedInPost:
      - transactionStatus
      - statusReasonInformation
    properties:
      paymentId:
        $ref: '#/definitions/PaymentIdentification'
      requestedExecutionDate:
        $ref: "#/definitions/RequestedExecutionDate"
      endDate:
        $ref: "#/definitions/EndDate"
      executionRule:
        $ref: "#/definitions/ExecutionRule"
      frequency:
        $ref: "#/definitions/FrequencyCode"
      instructedAmount:
        $ref: '#/definitions/AmountType'
      equivalentAmount:
        $ref: '#/definitions/EquivalentAmountType'
      exchangeRateInformation:
        $ref: '#/definitions/ExchangeRate'
      ultimateDebtor:
        $ref: '#/definitions/PartyIdentification'
      intermediaryAgent:
        $ref: '#/definitions/IntermediaryAgent'
      beneficiary:
        $ref: '#/definitions/Beneficiary'
      ultimateCreditor:
        $ref: '#/definitions/PartyIdentification'
      instructionForCreditorAgent:
        description: Further information related to the processing of the payment instruction, provided by the initiating party, and intended for the creditor agent.
        type: array
        items:
          $ref: '#/definitions/InstructionForCreditorAgent'
      purpose:   
        $ref: '#/definitions/PurposeCode'
      regulatoryReportingCodes:
        $ref: '#/definitions/RegulatoryReportingCodes'
      remittanceInformation:
        $ref: '#/definitions/RemittanceInformation'
      transactionStatus:
        $ref: '#/definitions/TransactionIndividualStatusCode'
      statusReasonInformation:
        $ref: '#/definitions/StatusReasonInformation'      
    example:
      {
         "paymentIdentification" : {
           "resourceId" : "MyInstrRscId",
           "instructionIdentification" : "MyInstrId",
           "endToEndIdentification" : "MyEndToEndId",
         },
         "requestedExecutionDate" : "2016-12-31T00:00:00.000+01:00",
         "instructedAmount" : {
           "currency" : "EUR",
           "amount" : "124.35",
         },
         "remittanceInformation" : [ "MyRemittanceInformation" ],
       }
          
      
  SupplementaryData:
    description: |
      ISO20022: Additional information that cannot be captured in the structured elements and/or any other specific block.
      
      API: This structure is used to embed the relevant URLs for returning the status report to the PISP and to specify which authentication approaches are accepted by the PISP and which has been chosen by the ASPSP
    type: object
    properties:
      acceptedAuthenticationApproach:
        description: |
          can only be set by the PISP
          authentication approaches that are supported by the PISP. The PISP can provide several choices separated by commas. 
          REDIRECT: the PSU is redirected by the TPP to the ASPSP which processes identification and authentication
          DECOUPLED: the TPP identifies the PSU and forwards the identification to the ASPSP which processes the authentication through a decoupled device
          EMBEDDED-1-FACTOR: the TPP identifies the PSU and forwards the identification to the ASPSP which starts the authentication. The TPP forwards one authentication factor of the PSU (e.g. OTP or response to a challenge)
        type: array
        items: 
          type: string
          description: combination of possible values for authentication approaches 
          minItems: 1
          enum:
            - REDIRECT
            - DECOUPLED
            - EMBEDDED-1-FACTOR 
      appliedAuthenticationApproach:
        $ref: '#/definitions/AppliedAuthenticationApproach'
      scaHint:
        description: |
          can only be set by the PISP
          Hint given by the merchant and/or the PISP about an SCA exemption context
        type: string
        enum:
          - noScaExemption
          - scaExemption
      successfulReportUrl:
        description: |
          URL to be used by the ASPSP in order to notify the PISP of the finalisation of the authentication and consent process in REDIRECT and DECOUPLED approach
        type: string
      unsuccessfulReportUrl:
        description: |
          URL to be used by the ASPSP in order to notify the PISP of the failure of the authentication and consent process in REDIRECT and DECOUPLED approach 
          If this URL is not provided by the PISP, the ASPSP will use the "successfulReportUrl" even in case of failure of the Payment Request processing
        type: string
    example:
      {
        "successfulReportUrl" : "http://myPisp/PaymentSuccess",
        "unsuccessfulReportUrl" : "http://myPisp/PaymentFailure",
      } 

  BalanceStatus:
    description: |
      Type of balance
      | Code | Name | Description |
      | ---- | ---- | ----------- |
      | CLBD | ISO20022 ClosingBooked | Accounting Balance |
      | XPCD | ISO20022 Expected | Instant Balance |
      | VALU | (None) | Value-date balance |
      | OTHR | (None) | Other Balance |
    type: string
    enum: 
      - CLBD
      - XPCD
      - VALU
      - OTHR
    example:
      "CLBD"
      
### Modified for CR342: Precision on transaction status valued to OTHR
  TransactionStatus:
    description: |
      Type of Transaction
      | Code | Name | Description |
      | ---- | ---- | ----------- |
      | BOOK | ClosingBooked | Accounted transaction |
      | PDNG | Pending | Transaction that is to be accounted and does already affect the instant balance |
      | OTHR | Other | transaction that is not accounted and does not affect the instant balance yet |
    type: string
    enum: 
      - BOOK
      - PDNG
      - OTHR
    example:
      "BOOK"
      
### Added for CR17: Add information about the source of a given transaction
  BankTransactionCode:
    description: |
      Set of elements used to fully identify the type of underlying transaction resulting in an entry.
      
      ISO20022 provides a list of [possible Bank Transaction Code combinations](https://www.iso20022.org/external_code_list.page)

      Transaction codification might also be specified at national community level.
      
      For instance a French Transaction codification is [available](https://www.cfonb.org/fichiers/20190913092943_Brochure_Codes_Operation_pour_restitutions_clienteles_V5_0_novembre_2018.pdf)

      It applies with Â§ 2 code table using the following mapping:
        - domain must be set with "FR"
        - family must be set with one of the values that are provided in the [code Famille] column (e.g. "OPCA")
        - subFamily must be set with one of the values that are provided in the [code opÃ©ration] column (e.g. "05") 
        - code might be set with a proprietary transaction code that must be documented by the implementation.
         
    type: object
    required:
      - domain
      - family
      - subFamily
    properties:
      domain:
        description: |
          Set of elements used to provide the domain, the family and the sub-family of the bank transaction code, in a structured and hierarchical format.  
        type: string
        maxLength: 4
      family:
        description: |
          Specifies the family and the sub-family of the bank transaction code, within a specific domain, in a structured and hierarchical format.
        type: string
        maxLength: 4
      subFamily:
        description: |
          Specifies the sub-product family within a specific family.
        type: string
        maxLength: 4
      code:
        description: |
          Proprietary bank transaction code to identify the underlying transaction.
        type: string
        maxLength: 35
      issuer:
        description: |
          Identification of the issuer of the proprietary bank transaction code.
        type: string
        maxLength: 35
        
  CreditDebitIndicator:
    description: |
      Accounting flow of the amount
      | Code | Description |
      | ---- | ----------- |
      | CRDT | Credit type amount |
      | DBIT | Debit type amount |
    type: string
    enum: 
      - CRDT
      - DBIT
    example:
      "CRDT"

### Added for CR44: Add information about the counterpart of the transaction
  RelatedParties:
    description: information about the parties that are related to the transaction
    type: object
    properties:
      initiatingParty:
        $ref: '#/definitions/PartyIdentification'
      debtorAgent:
        $ref: '#/definitions/FinancialInstitutionIdentification'
      debtor:
        $ref: '#/definitions/PartyIdentification'
      debtorAccount:
        $ref: '#/definitions/AccountIdentification'
      ultimateDebtor:
        $ref: '#/definitions/PartyIdentification'
      creditorAgent:
        $ref: '#/definitions/FinancialInstitutionIdentification'
      creditor:
        $ref: '#/definitions/PartyIdentification'
      creditorAccount:
        $ref: '#/definitions/AccountIdentification'
      ultimateCreditor:
        $ref: '#/definitions/PartyIdentification'
        
### Added for CR213: Adding exchange rate information for transactions
### Modified for CR302: Set amount as mandatory in AmountAndCurrencyExchangeDetails
  AmountAndCurrencyExchangeDetails:
    description: |
      details on amount and currency exchange
    type: object
    required:
      - amount
      - sourceCurrency
      - exchangeRate
    properties:
      type:
        description: specifies the type of amount in case of proprietary amount
        type: string
        maxLength: 35
      amount:
        description: Amount of money to be exchanged against another amount of money in the counter currency.
        $ref: '#/definitions/AmountType'
      sourceCurrency:
        description: Currency from which an amount is to be converted in a currency conversion.           
        $ref: '#/definitions/CurrencyCode'
      targetCurrency:
        description: Currency into which an amount is to be converted in a currency conversion.           
        $ref: '#/definitions/CurrencyCode'
      unitCurrency:
        description: Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        $ref: '#/definitions/CurrencyCode'
      exchangeRate:
        description: |
          Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.
          ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).
        type: number
        format: float
      contractIdentification:
        description: Unique identification to unambiguously identify the foreign exchange contract.
        type: string
        maxLength: 35
      quotationDate:
        description: Date and time at which an exchange rate is quoted.
        type: string
        format: date
      
      
### Added for CR213: Adding exchange rate information for transactions
  AmountAndCurrencyExchange:
    description: Provides detailed information on the original amount.
    type: object
    properties:
      instructedAmount:
        description: Identifies the amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party and provides currency exchange information in case the instructed amount and/or currency is/are different from the entry amount and/or currency.
        $ref: '#/definitions/AmountAndCurrencyExchangeDetails'
      transactionAmount:
        description: Identifies the amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party and provides currency exchange information in case the instructed amount and/or currency is/are different from the entry amount and/or currency.
        $ref: '#/definitions/AmountAndCurrencyExchangeDetails'
      counterValueAmount:
        description: |
          Set of elements used to provide the countervalue amount and currency exchange information.
          This can be either the counter amount quoted in an FX deal, or the result of the currency information applied to an instructed amount, before deduction of charges.
        $ref: '#/definitions/AmountAndCurrencyExchangeDetails'
      announcedPostingAmount:
        description: |
          Amount of money, based on terms of corporate action event and balance of underlying securities, entitled to/from the account owner.
          In some situations, this amount may alternatively be called entitled amount.
        $ref: '#/definitions/AmountAndCurrencyExchangeDetails'
      proprietaryAmount:
        description: |
          Set of elements used to provide information on the original amount and currency exchange.
        type: array
        items:
          $ref: '#/definitions/AmountAndCurrencyExchangeDetails'

### Added for CR253: Adding fee information on transactions
  TaxCharges:
    description: Provides details on the tax applied to charges.
    type: object
    properties:
      identification:
        description: Unique reference to unambiguously identify the nature of the tax levied, such as Value Added Tax (VAT).
        type: string
        maxLength: 35
      rate:
        description: Rate used to calculate the tax.
        $ref: '#/definitions/PercentageRate'
      amount: 
        description: Amount of money resulting from the calculation of the tax.
        $ref: '#/definitions/AmountType'

### Added for CR253: Adding fee information on transactions
  ChargesRecord:
    description: Provides further individual record details on the charges related to the payment transaction.
    type: object
    properties:
      amount: 
        description: Transaction charges to be paid by the charge bearer.
        $ref: '#/definitions/AmountType'
      creditDebitIndicator:
        description: |
          Indicates whether the charges amount is a credit or a debit amount.
          A zero amount is considered to be a credit.
        $ref: '#/definitions/CreditDebitIndicator'
      chargeIncludedIndicator:
        description: |
          Indicates whether the charge should be included in the amount or is added as pre-advice.
          One of the following values must be used:
            - Meaning When True: Included
            - Meaning When False: Pre-advised
        type: boolean
      code:
        description: Charge type, in a coded form
        $ref: '#/definitions/CodeAndIssuer'
      rate:
        description: Rate used to calculate the amount of the charge or fee.
        $ref: '#/definitions/PercentageRate'
      bearer:
        description: |
          Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
        $ref: '#/definitions/ChargeBearerCode'
      agent:
        description: Agent that takes the transaction charges or to which the transaction charges are due.
        $ref: '#/definitions/FinancialInstitutionIdentification'
      tax:
        description: Provides details on the tax applied to charges.
        $ref: '#/definitions/TaxCharges'
        

### Added for CR253: Adding fee information on transactions
  Charges:
    description: Provides further details on the charges related to the payment transaction.
    type: object
    properties:
      totalChargesAndTaxAmount:
        description: Total of all charges and taxes applied to the entry.
        $ref: '#/definitions/AmountType'
      record:
        description: Provides details of the individual charges record.        
        type: array
        items: 
          $ref: '#/definitions/ChargesRecord'

### Modified for CR17: Add information about the source of a given transaction
### Modified for CR44: Add information about the counterpart of the transaction
### Modified for CR213: Adding exchange rate information for transactions
### Modified for CR253: Adding fee information on transactions
### Modified for CR274: Add precision on bookingDate
### Modified for CR276: Add expectedBookingDate field + (fixed property name)
### Modified for CR295: Data type Inconsistency between bookingDate, dateFrom and dateTo
### Modified for CR318: Set the transactionDate as datetime
### Modified for CR352: Stability of entryReference value within time
### Modified for CR353: Add an text field in addition to the remittance information for transactions provided to the AISP
  Transaction:
    description: |
      Structure of a transaction. 
      At least expectedBookingDate or bookingDate must be provided
    type: object
    required:
      - transactionAmount
      - status
      - creditDebitIndicator
    properties:
      resourceId:
        readOnly: true
        $ref: '#/definitions/ResourceId'
      entryReference:
        type: string
        description: |
          Technical incremental identification of the transaction. Once assigned, this value cannot be changed for the relevant transaction.
        maxLength: 40
      transactionAmount:
        $ref: '#/definitions/AmountType'
      creditDebitIndicator:
        $ref: '#/definitions/CreditDebitIndicator'
      transactionAmountDetails:
        $ref: '#/definitions/AmountAndCurrencyExchange'      
      status:
        $ref: '#/definitions/TransactionStatus'
      expectedBookingDate:
        description: |
          Expected booking date of the transaction on the account if the transaction is not yet booked. 
        type: string
        format: date-time
      bookingDate:
        description: |
          Real booking date of the transaction on the account
        type: string
        format: date-time
      valueDate:
        description: Value date of the transaction on the account
        type: string
        format: date-time
      transactionDate:
        description: |
          Date used for specific purposes: 
          - for card transaction: date of the transaction
          - for credit transfer: acquiring date of the transaction
          - for direct debit: receiving date of the transaction
        type: string
        format: date-time
      bankTransactionCode:
        $ref: '#/definitions/BankTransactionCode'  
      charges:
        description: Provides information on the charges, pre-advised or included in the entry amount.
        $ref: '#/definitions/Charges'          
      relatedParties:
        description: debtor or creditor counterpart information
        $ref: '#/definitions/RelatedParties'          
      remittanceInformation:
        $ref: '#/definitions/RemittanceInformation'
      additionalTransactionInformation: 
        description: Additional information about reconciliation.
        type: string
        maxLength: 500
    example:
      {
        "entryReference": "AF5T2",
        "transactionAmount": {
          "currency": "EUR",
          "amount": "12.25"
        },
        "creditDebitIndicator": "CRDT",
        "status": "BOOK",
        "bookingDate": "2018-02-12",
        "remittanceInformation": [
          "SEPA CREDIT TRANSFER from PSD2Company"
        ]
      }
      
### Added for CR313: add new values for PsuStatus
  PsuStatusType:
    description: |
      ISO20022: Specifies the type of account ownership.
      | Name | Description |
      | ---- | ---------- |
      | Account Holder | Person which is the sole holder of the account. |
      | Account Co-Holder | Person which shares with others the holding of the account. |
      | Attorney | Generic case of a person having a mandate to access the account data. |
      | Custodian For Minor | Entity that holds shares/units on behalf of a legal minor. Although the account is registered under the name of the minor, the custodian retains control of the account. |
      | Legal Guardian | Entity that has been appointed by a legal authority to act on behalf of a person judged to be incapacitated. |
      | Nominee | Entity named by the beneficial owner to act on its behalf, often to facilitate dealing, or to conceal the identity of the beneficiary. |
      | Successor On Death | Deceased's estate, or successor, to whom the respective percentage of ownership will be transferred upon the death of one of the owners. |
      | Trustee | Legal owners of the property. However, the beneficiary has the equitable or beneficial ownership. |
    type: string    
    maxLength: 35
    
             
## API resources definitions

### Modified for CR299: Modify booking date handling in card accounts
### Modified for CR303: Add the company name for corporate accounts
### Modified for CR313: add new values for PsuStatus
  AccountResource:
    description: |
      PSU account that is made available to the TPP
    type: object
    required: 
      - name
      - cashAccountType
      - _links
    properties:
      resourceId:
        readOnly: true
        $ref: '#/definitions/ResourceId'
      bicFi: 
        description: |
          ISO20022: Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identification code (BIC)".
        type: string
        pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$'
      accountId:
        $ref: '#/definitions/AccountIdentification'
      name:
        description: |
          Label of the PSU account
          In case of a delayed debit card transaction set, the name shall specify the holder name and can also provide the imputation date
        type: string
        maxLength: 70
      details:
        description: |
          Specifications that might be provided by the ASPSP
          - characteristics of the account
          - characteristics of the relevant card
        type: string
        maxLength: 140
      linkedAccount:
        description: Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.
        type: string
        maxLength: 70
      usage:
        description: |
          Specifies the usage of the account
          | Code | Description |
          | ---- | ----------- |
          | PRIV | Private personal account |
          | ORGA | Professional account |
        type: string
        enum:
        - PRIV
        - ORGA
      company:
        description: |
          specifies the identity of the company owning the account in case of usage="PRIV"
        $ref: '#/definitions/GenericIdentification'        
      cashAccountType:
        description: |
          Specifies the type of the account
          | Code | Description |
          | ---- | ----------- |
          | CACC | Cash account |
          | CARD | List of card based transactions |
        type: string
        enum: 
        - CACC
        - CARD
      product:
        description : |
          Product Name of the Bank for this account, proprietary definition
        type: string
        maxLength: 35
      balances:
        description: list of balances provided by the ASPSP
        type: array
        items:
          $ref: '#/definitions/BalanceResource'
        minItems: 1
      psuStatus:
        $ref: '#/definitions/PsuStatusType'        
      _links:
        $ref: '#/definitions/AccountLinks'
    example:
      {
        "resourceId" : "Alias1",
        "bicFi" : "BNKAFRPPXXX",
        "name" : "Compte de Mr et Mme Dupont",
        "usage" : "PRIV",
        "cashAccountType" : "CACC",
        "currency" : "EUR",
        "psuStatus" : "Co-account Holder",
        "_links" : {
          "balances" : {
            "href" : "v1/accounts/Alias1/balances",
          },
          "transactions" : {
            "href" : "v1/accounts/Alias1/transactions",
          },
        }
      }
        
  BalanceResource:
    description: Structure of an account balance
    type: object
    required:
      - name
      - balanceAmount
      - balanceType
    properties:
      name:
        description:  Label of the balance
        type: string
        maxLength: 70
      balanceAmount:
        $ref: '#/definitions/AmountType'
      balanceType:
        $ref: '#/definitions/BalanceStatus'
      lastChangeDateTime:
        description: Timestamp of the last change of the balance amount
        type: string
        format: date-time              
      referenceDate:
        description: Reference date for the balance
        type: string
        format: date-time
      lastCommittedTransaction:
        description: |
          Identification of the last committed transaction. This is actually useful for instant balance.
        type: string
        maxLength: 40
    example:
      {
        "name" : "Solde comptable au 12/01/2017",
        "balanceAmount" : {
          "currency" : "EUR",
          "amount" : "123.45",
        },
        "balanceType" : "CLBD",
        "lastCommittedTransaction" : "A452CH",
      }
        
  Nonce:
    description: |
      Challenge to be sent in order to avoid replay of the authentication process.
    type: string
    maxLength: 70

  ConfirmationResource:
    description: Confirmation request resource
    type: object
    properties:  
      nonce:
        $ref: '#/definitions/Nonce'        
      psuAuthenticationFactor:
        type: string
        description: authentication factor forwarded by the TPP to the ASPSP in order to fulfil the strong customer authentication process
    example:
      {
          "psuAuthenticationFactor" : "JJKJKJ788GKJKJBK"
      }
             
### Modified for CR314: Allign Resource Id to 36 characters (UUID)
  PaymentInformationId:
    description: |
      ISO20022: Reference assigned by a sending party to unambiguously identify the payment information block within the message.
    type: string
    pattern: '^([a-zA-Z0-9 /\-?:\()\.,'']{1,36})$'
    example:
      "MyPmtInfId"

  CreationDateTime:
    description: |
      ISO20022: Date and time at which a (group of) payment instruction(s) was created by the instructing party.
    type: string
    format: date-time
    example:
      "2018-03-31T13:25:22.527+02:00"

  FundsAvailabilityInformation:
    description: |
      indicator that the payment can be covered or not by the funds available on the relevant account
      - true: payment is covered
      - false: payment is not covered
    type: boolean
    readOnly: true
    example:
      "true"

  BookingInformation:
    description: |
      indicator that the payment can be immediately booked or not
      - true: payment is booked
      - false: payment is not booked
    type: boolean
    readOnly: true
    example:
      "true"

### Added for CR227: Adding a batchBooking Indicator
  BatchBookingIndicator:
    description: |
      Identifies whether a single entry per individual transaction or a batch entry for the sum of the amounts of all transactions within the group of a message is requested.
      Meaning When True: Identifies that a batch entry for the sum of the amounts of all transactions in the batch or message is requested.
      Meaning When False: Identifies that a single entry for each of the transactions in the batch or message is requested.    
    type: boolean    

### Modified for CR227: Adding a batchBooking Indicator
### Modified for CR242: Allow the PISP to explain it accepts a possible change of the debtor account
### Modified for CR243: Allow the PISP to explain it accepts a possible change of charge handling
### Modified for CR266: Modify the Purpose structure
### Modified for CR278: Avoid duplication of UltimateCreditor structure
  PaymentRequestResource:
    description: |
      ISO20022: The PaymentRequestResource message is sent by the Creditor sending party to the Debtor receiving party, directly or through agents. It is used by a Creditor to request movement of funds from the debtor account to a creditor.
      API: 
      Information about the creditor (Id, account and agent) might be placed either at payment level or at instruction level. Thus multi-beneficiary payments can be handled.
      The requested execution date can be placed either at payment level when all instructions are requested to be executed at the same date or at instruction level.
      The latest case includes:
      - multiple instructions having different requested execution dates
      - standing orders settings 
    type: object
    required:
      - paymentInformationId
      - creationDateTime
      - numberOfTransactions
      - initiatingParty
      - paymentTypeInformation
      - creditTransferTransaction
      - supplementaryData
    x-NotAllowedInPost:
      - paymentInformationStatus
      - statusReasonInformation
    properties:       
      resourceId:
        readOnly: true
        $ref: '#/definitions/ResourceId'
      paymentInformationId:
        $ref: '#/definitions/PaymentInformationId'
      batchBooking:
        $ref: '#/definitions/BatchBookingIndicator'
      creationDateTime:
        $ref: '#/definitions/CreationDateTime'
      numberOfTransactions:
        description: |
          ISO20022: Number of individual transactions contained in the message.
          API: Each ASPSP will specify a maximum value for this field taking into accounts its specificities about payment request handling
        type: integer
        minimum: 1
      initiatingParty:
        $ref: '#/definitions/PartyIdentification'
      acceptDebtorAccountChange:
        description: |
         indicator that the debtor account can be changed in the payment request by the ASPSP if needed
         - true: debtor account can be changed (default value)
         - false: debtor account cannot be changed
        type: boolean
      acceptChargeHandlingChange:
        description: |
         indicator that the charge handling can be changed in the payment request by the ASPSP if needed
         - true: charge handling can be changed (default value)
         - false: charge handling cannot be changed
        type: boolean
      paymentTypeInformation:
        $ref: '#/definitions/PaymentTypeInformation'
      debtor:
        $ref: '#/definitions/PartyIdentification'
      debtorAccount:
        $ref: '#/definitions/AccountIdentification'
      debtorAgent:
        $ref: '#/definitions/FinancialInstitutionIdentification'
      beneficiary:
        $ref: '#/definitions/Beneficiary'
      chargeBearer:
        $ref: '#/definitions/ChargeBearerCode'
      paymentInformationStatus:
        $ref: '#/definitions/PaymentInformationStatusCode'
      statusReasonInformation:
        $ref: '#/definitions/StatusReasonInformation'
      fundsAvailability:
        $ref: '#/definitions/FundsAvailabilityInformation'      
      booking:
        $ref: '#/definitions/BookingInformation'      
      requestedExecutionDate:
        description: |
          ISO20022: Date at which the initiating party requests the clearing agent to process the payment. 
        type: string
        format: date-time
      creditTransferTransaction:
        description: |
          ISO20022: Payment processes required to transfer cash from the debtor to the creditor.
          API: Each ASPSP will specify a maxItems value for this field taking into accounts its specificities about payment request handling
        type: array
        minItems: 1 
        items:
          $ref: '#/definitions/CreditTransferTransaction'
      supplementaryData:
        $ref: '#/definitions/SupplementaryData'
### Modified for CR308: Fix the creditor structure in the swagger examples
    example:
      {
       "paymentInformationId" : "MyPmtInfId",
       "creationDateTime" : "2018-03-31T13:25:22.527+02:00",
       "numberOfTransactions" : 1,
       "initiatingParty" : {
        "name" : "MyPreferredPisp",
        "postalAddress" : {
         "country" : "FR",
         "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ],
        },
        "organisationId" : {
         "identification" : "12FR5",
         "schemeName" : "COID",
         "issuer" : "ACPR",
        },
       },
       "paymentTypeInformation" : {
        "serviceLevel" : "SEPA",
        "localInstrument" : "INST",
        "categoryPurpose" : "DVPM",
       },
       "debtor" : {
        "name" : "MyCustomer",
        "postalAddress" : {
         "country" : "FR",
         "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ],
        },
        "privateId" : {
         "identification" : "FD37G",
         "schemeName" : "BANK",
         "issuer" : "BICXYYTTZZZ",
        },
       },
       "beneficiary" : {
        "creditor" : {
         "name" : "myMerchant",
         "postalAddress" : {
          "country" : "FR",
          "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ],
         },
         "organisationId" : {
          "identification" : "852126789",
          "schemeName" : "SIREN",
          "issuer" : "FR",
         },
         },
       },
       "creditorAccount" : {
        "iban" : "YY64COJH41059545330222956960771321",
       },
       "ultimateCreditor" : {
        "name" : "myPreferredUltimateMerchant",
        "postalAddress" : {
         "country" : "FR",
         "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ],
        },
        "organisationId" : {
         "identification" : "85212678900025",
         "schemeName" : "SIRET",
         "issuer" : "FR",
        },
       },
       "purpose" : "COMC",
       "chargeBearer" : "SLEV",
       "creditTransferTransaction" : [ {
        "paymentId" : {
         "instructionId" : "MyInstrId",
         "endToEndId" : "MyEndToEndId",
        },
        "requestedExecutionDate" : "2016-12-31T00:00:00.000+01:00",
        "instructedAmount" : {
         "currency" : "EUR",
         "amount" : "124.35",
        },
        "remittanceInformation" : [ "MyRemittanceInformation" ],
       } ],
       "supplementaryData" : {
        "acceptedAuthenticationApproach" : [ "REDIRECT", "DECOUPLED" ],
        "successfulReportUrl" : "http://myPisp/PaymentSuccess",
        "unsuccessfulReportUrl" : "http://myPisp/PaymentFailure",
       }
      }    
        
### Modified for CR321: Precision on signed amount for funds-confirmation request
  PaymentCoverageRequestResource:
    description: Payment coverage request structure. The request must rely either on a cash account or a payment card.
    type: object
    required:
      - paymentCoverageRequestId
      - instructedAmount
      - accountId
    properties:
      paymentCoverageRequestId:
        description: Identification of the payment Coverage Request
        type: string
        maxLength: 35
      payee:
        description: The merchant where the card is accepted as information to the PSU.
        type: string
        maxLength: 70        
      instructedAmount:
        description: this amount is the payment account on wihich the request is processed. This amount must be positive.
        $ref: '#/definitions/AmountType'
      accountId:
        $ref: '#/definitions/AccountIdentification'
    example:
      {
       "paymentCoverageRequestId" : "MyCoverage123456",
       "instructedAmount" : {
        "currency" : "EUR",
        "amount" : "12345",
       },
       "accountId" : {
        "iban" : "YY13RDHN98392489481620896668799742",
       }
      }
       
## API HAL definitions 

  HalAccounts:
    description:
      HYPERMEDIA structure used for returning the list of the available accounts to the AISP
    type: object
    required:
      - accounts
      - _links
    properties:
      accounts:
        description: |
          List of PSU account that are made available to the TPP
        type: array
        items:
          $ref: '#/definitions/AccountResource'
      _links:
        $ref: '#/definitions/PsuContextLinks'
    example:
      {
        "accounts" : [ {
          "resourceId" : "Alias1",
          "bicFi" : "BNKAFRPPXXX",
          "name" : "Compte de Mr et Mme Dupont",
          "usage" : "PRIV",
          "cashAccountType" : "CACC",
          "currency" : "EUR",
          "psuStatus" : "Co-account Holder",
          "_links" : {
            "balances" : {
              "href" : "v1/accounts/Alias1/balances"
            },
            "transactions" : {
              "href" : "v1/accounts/Alias1/transactions"
            }
          }
        } ],
        "_links" : {
          "self" : {
            "href" : "v1/accounts?page=2"
          },
          "first" : {
            "href" : "v1/accounts"
          },
          "last" : {
            "href" : "v1/accounts?page=last",
            "templated" : true
          },
          "next" : {
            "href" : "v1/accounts?page=3",
            "templated" : true
          },
          "prev" : {
            "href" : "v1/accounts",
            "templated" : true
          }
        }
      }
    
          
  HalBalances:
    description:
      HYPERMEDIA structure used for returning the list of the relevant balances for a given account to the AISP
    type: object
    required:
      - balances
      - _links
    properties:
      balances:
        description: List of account balances
        type: array
        items:
          $ref: '#/definitions/BalanceResource'
        minItems: 1
      _links:
        $ref: '#/definitions/BalancesLinks'
    example:
      {
        "balances" : [ {
          "name" : "Solde comptable au 12/01/2017",
          "balanceAmount" : {
            "currency" : "EUR",
            "amount" : "123.45"
          },
          "balanceType" : "CLBD",
          "lastCommittedTransaction" : "A452CH"
        } ],
        "_links" : {
          "self" : {
            "href" : "v1/accounts/Alias1/balances-report"
          },
          "parent-list" : {
            "href" : "v1/accounts"
          },
          "transactions" : {
            "href" : "v1/accounts/Alias1/transactions"
          }
        }
      }
    

  HalTransactions:
    description:
      HYPERMEDIA structure used for returning the list of the transactions for a given account to the AISP
    type: object
    required:
      - transactions
      - _links
    properties:
      transactions:
        description: List of transactions
        type: array
        items:
          $ref: '#/definitions/Transaction'
      _links:
        $ref: '#/definitions/TransactionsLinks'
    example:
      {
        "transactions" : [ {
          "entryReference" : "AF5T2",
          "transactionAmount" : {
            "currency" : "EUR",
            "amount" : "12.25"
          },
          "creditDebitIndicator" : "CRDT",
          "status" : "BOOK",
          "bookingDate" : "2018-02-12",
          "remittanceInformation" : [ "SEPA CREDIT TRANSFER from PSD2Company" ]
        } ],
        "_links" : {
          "self" : {
            "href" : "v1/accounts/Alias1/transactions"
          },
          "parent-list" : {
            "href" : "v1/accounts"
          },
          "balances" : {
            "href" : "v1/accounts/Alias1/balances"
          },
          "last" : {
            "href" : "v1/accounts/sAlias1/transactions?page=last"
          },
          "next" : {
            "href" : "v1/accounts/Alias1/transactions?page=3"
          }
        }
      }    
        
  HalPaymentRequest:
    description:
      HYPERMEDIA structure used for returning the original Payment Request to the PISP
    type: object
    required:
      - paymentRequest    
      - _links
    properties:
      paymentRequest:
        $ref: '#/definitions/PaymentRequestResource'
      _links:
        $ref: '#/definitions/PaymentRequestLinks'
### Modified for CR308: Fix the creditor structure in the swagger examples
    example:
      {
        "paymentRequest" : {
          "paymentInformationId" : "MyPmtInfId",
          "creationDateTime" : "2018-03-31T13:25:22.527+02:00",
          "numberOfTransactions" : 1,
          "initiatingParty" : {
            "name" : "MyPreferredPisp",
            "postalAddress" : {
              "country" : "FR",
              "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ]
            },
            "organisationId" : {
              "identification" : "12FR5",
              "schemeName" : "COID",
              "issuer" : "ACPR"
            }
          },
          "paymentTypeInformation" : {
            "serviceLevel" : "SEPA",
            "localInstrument" : "INST",
            "categoryPurpose" : "DVPM"
          },
          "debtor" : {
            "name" : "MyCustomer",
            "postalAddress" : {
              "country" : "FR",
              "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ]
            },
            "privateId" : {
              "identification" : "FD37G",
              "schemeName" : "BANK",
              "issuer" : "BICXYYTTZZZ"
            }
          },
          "beneficiary" : {
           "isTrusted" : true,
           "creditor" : {
             "name" : "myMerchant",
             "postalAddress" : {
             "country" : "FR",
             "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ],
             },
             "organisationId" : {
             "identification" : "852126789",
             "schemeName" : "SIREN",
             "issuer" : "FR",
           },
           },
          },
          "creditorAccount" : {
            "iban" : "YY64COJH41059545330222956960771321"
          },
          "ultimateCreditor" : {
            "name" : "myPreferredUltimateMerchant",
            "postalAddress" : {
              "country" : "FR",
              "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ]
            },
            "organisationId" : {
              "identification" : "85212678900025",
              "schemeName" : "SIRET",
              "issuer" : "FR"
            }
          },
          "purpose" : "COMC",
          "chargeBearer" : "SLEV",
          "creditTransferTransaction" : [ {
            "paymentId" : {
              "instructionId" : "MyInstrId",
              "endToEndId" : "MyEndToEndId"
            },
            "requestedExecutionDate" : "2016-12-31T00:00:00.000+01:00",
            "instructedAmount" : {
              "currency" : "EUR",
              "amount" : "124.35"
            },
            "remittanceInformation" : [ "MyRemittanceInformation" ]
          } ],
          "supplementaryData" : {
            "acceptedAuthenticationApproach" : [ "REDIRECT", "DECOUPLED" ],
            "successfulReportUrl" : "http://myPisp/PaymentSuccess",
            "unsuccessfulReportUrl" : "http://myPisp/PaymentFailure"
          }
        },
        "_links" : {
          "self" : {
            "href" : "v1/payment-requests/MyPmtInfRscId"
          },
          "confirmation" : {
            "href" : "v1/payment-requests/MyPmtInfRscId/confirmation"
          }
        }
      }
    
    
  HalPaymentRequestCreation:
    description: |
      data forwarded by the ASPSP top the PISP after creation of the Payment Request resource creation
    type: object
    properties:
      appliedAuthenticationApproach:
        $ref: '#/definitions/AppliedAuthenticationApproach'
      nonce:
        $ref: '#/definitions/Nonce'        
      _links:
        $ref: '#/definitions/PaymentRequestResourceCreationLinks'
    example:
      {
        "appliedAuthenticationApproach" : {
          "appliedAuthenticationApproach" : "REDIRECT"
        },
        "_links" : {
          "consentApproval" : {
            "href" : "https://psd2.aspsp/consent-approval"
          }
        }
      }
    

  HalPaymentCoverageReport:
    description:
      HYPERMEDIA structure used for returning the payment coverage report to the CBPII
    type: object
    required:
      - request
      - result
      - _links
    properties:
      request:
        $ref: '#/definitions/PaymentCoverageRequestResource'
      result:
        description: |
          Result of the coverage check :
          - true: the payment can be covered
          - false: the payment cannot be covered
        type: boolean
      _links:
        $ref: '#/definitions/PaymentCoverageReportLinks'
    example:
      {
        "request" : {
          "paymentCoverageRequestId" : "MyCoverage123456",
          "instructedAmount" : {
            "currency" : "EUR",
            "amount" : "12345"
          },
          "accountId" : {
            "iban" : "YY13RDHN98392489481620896668799742"
          }
        },
        "result" : true,
        "_links" : {
          "self" : {
            "href" : "v1/funds-confirmations"
          }
        }
      }


### Modified for CR314: Allign Resource Id to 36 characters (UUID)
  Beneficiary:
    description:
      Specification of a beneficiary
    type: object
    required:
      - creditor
    properties:
      id: 
        type: string
        description: Id of the beneficiary
        pattern: '^([a-zA-Z0-9 /\-?:\()\.,'']{1,36})$'
      isTrusted:
        description: |
          The ASPSP having not implemented the trusted beneficiaries list must not set this flag.
          Otherwise, the ASPSP indicates whether or not the beneficiary has been registered by the PSU within the trusted beneficiaries list.
          - true: the beneficiary is actually a trusted beneficiary
          - false: the beneficiary is not a trusted beneficiary         
        type: boolean 
        readOnly: true
      creditorAgent:
        $ref: '#/definitions/FinancialInstitutionIdentification'
      creditor:
        $ref: '#/definitions/PartyIdentification'
      creditorAccount:
        $ref: '#/definitions/AccountIdentification'
    example:
      {
        "id" : "MyBeneficiaryId",
        "isTrusted" : true,
        "creditorAgent" : {
          "bicFi" : "BNKAFRPPXXX"
        },
        "creditor" : {
          "name" : "MyPreferredPisp",
          "postalAddress" : {
            "country" : "FR",
            "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ]
          }
        },
        "creditorAccount" : {
          "iban" : "YY64COJH41059545330222956960771321"
        }
      }    

### Added for CR287 Structured PSU identity
  NamePrefixCode:
    description: |
      Specifies the terms used to formally address a person.
      This field accepts the following code values
      | Code | Description |
      | ---- | ---------- |
      | DOCT | Doctor |
      | MADM | Madam |
      | MISS | Miss |
      | MIST | Mister |
    type: string
    enum:
      - DOCT
      - MADM
      - MISS
      - MIST

### Modified for CR287 Structured PSU identity
  HalEndUserIdentity:
    description:
      HYPERMEDIA structure used for returning the identity of the PSU
    type: object
    required:
      - connectedPsu
      - _links
    properties:
      connectedPsu:
        description: |
          Last name and first name of the PSU which has granted access to the AISP on the accounts data
          This information can be retrieved based on the PSU's authentication that occurred during the OAUTH2 access token initialisation.
        type: string
        maxLength: 70
      connectedPsuNamePrefix:
        $ref: '#/definitions/NamePrefixCode'
      connectedPsuFirstName:
        description: |
          First name of the PSU which has granted access to the AISP on the accounts data
          This information can be retrieved based on the PSU's authentication that occurred during the OAUTH2 access token initialisation.
        type: string
        maxLength: 70
      connectedPsuLastName:
        description: |
          Last name of the PSU which has granted access to the AISP on the accounts data
          This information can be retrieved based on the PSU's authentication that occurred during the OAUTH2 access token initialisation.
        type: string
        maxLength: 70
      _links:
        $ref: '#/definitions/EndUserIdentityLinks'
    example:
      {
        "connectedPsu" : "IMeMyself",
        "_links" : {
          "self" : {
            "href" : "v1/end-user-identity"
          },
          "parent-list" : {
            "href" : "v1/accounts"
          }
        }
      }
        
  HalBeneficiaries:
    description:
      HYPERMEDIA structure used for returning the list of the whitelisted beneficiaries
    type: object
    required:
      - beneficiaries
      - _links
    properties:
      beneficiaries:
        type: array
        description: List of trusted beneficiaries
        items:
          $ref: '#/definitions/Beneficiary'
      _links:
        $ref: '#/definitions/BeneficiariesLinks'
    example:
      {
        "beneficiaries" : [ {
          "id" : "MyBeneficiaryId",
          "isTrusted" : true,
          "creditorAgent" : {
            "bicFi" : "BNKAFRPPXXX"
          },
          "creditor" : {
            "name" : "MyPreferredPisp",
            "postalAddress" : {
              "country" : "FR",
              "addressLine" : [ "18 rue de la DSP2", "75008 PARIS" ]
            }
          },
          "creditorAccount" : {
            "iban" : "YY64COJH41059545330222956960771321"
          }
        } ],
        "_links" : {
          "self" : {
            "href" : "v1/beneficiaries"
          },
          "parent-list" : {
            "href" : "v1/accounts"
          },
          "last" : {
            "href" : "v1/beneficiaries?page=last"
          },
          "next" : {
            "href" : "v1/beneficiaries?page=3"
          }
        }
      }        

  AccessibleAccounts:
    description: List of accessible accounts for one given functionality
    type: array
    items: 
      $ref: '#/definitions/AccountIdentification'
    example:
      [ {
        "iban" : "YY64COJH41059545330222956960771321"
      } ]

  Access:
    description: Requested access services.
    type: object
    required:
      - balances
      - transactions
      - trustedBeneficiaries
      - psuIdentity
    properties:
      balances: 
        $ref: '#/definitions/AccessibleAccounts'
      transactions: 
        $ref: '#/definitions/AccessibleAccounts'
      trustedBeneficiaries:
        description: |
          Indicator that access to the trusted beneficiaries list was granted or not to the AISP by the PSU
          - true: the access was granted
          - false: the access was not granted
        type: boolean
      psuIdentity:
        description: |
          Indicator that access to the PSU identity, first name and last name, was granted or not to the AISP by the PSU
          - true: the access was granted
          - false: the access was not granted
        type: boolean
    example:
      {
        "balances" : [ {
          "iban" : "YY64COJH41059545330222956960771321"
        } ],
        "trustedBeneficiaries" : true,
        "psuIdentity" : true
      }

parameters:

## Path parameters
### Modified for CR314: Allign Resource Id to 36 characters (UUID)
  AccountResourceIdentification:
    name: accountResourceId
    in: path
    description: Identification of account resource to fetch
    required: true
    type: string
    pattern: '^([a-zA-Z0-9 /\-?:\()\.,'']{1,36})$'
    
### Modified for CR314: Allign Resource Id to 36 characters (UUID)
  PaymentRequestResourceIdentification:
    name: paymentRequestResourceId
    in: path
    description: Identification of the Payment Request Resource 
    required: true
    type: string
    pattern: '^([a-zA-Z0-9 /\-?:\()\.,'']{1,36})$'

## Query parameters
  FromEntryReference:
    name: entryReferenceFrom
    in: query
    description: |
      Specifies the value on which the result has to be computed. 
            
      Only the transaction having a technical identification greater than this value must be included within the result
    required: false
    type: string
    maxLength: 40
    
  ToEntryReference:
    name: entryReferenceto
    in: query
    description: |
      Specifies the value on which the result has to be computed. 
            
      Only the transaction having a technical identification less than or equal to this value must be included within the result
    required: false
    type: string
    maxLength: 40
    
  ToImputationDate:
    name: dateTo
    in: query
    description: |
      Exclusive maximal imputation date of the transactions. 
            
      Transactions having an imputation date equal to this parameter are not included within the result.
    required: false
    type: string
    format: date-time
    
  FromImputationDate:
    name: dateFrom
    in: query
    description: |
      Inclusive minimal imputation date of the transactions. 
            
      Transactions having an imputation date equal to this parameter are included within the result.
    required: false
    type: string
    format: date-time
    
### Added for CR244: Adding information in order to handle the PSU language preferences 
  UiLocales:
    name: ui_locales
    in: query
    description: |
      End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference.
    required: false
    type: string
    maxLength: 140  
    
## Header parameters
  AuthorizationParameter:
    name: Authorization
    in: header
    description: Access token to be passed as a header
    required: true
    type: string
  PsuIpAddressHeader:
    name: PSU-IP-Address
    type: string
    in: header
    description: IP address used by the PSU's terminal when connecting to the TPP
  PsuIpPortHeader:
    name: PSU-IP-Port
    type: string
    in: header
    description: IP port used by the PSU's terminal when connecting to the TPP
  PsuHttpMethodHeader:
    name: PSU-HTTP-Method
    type: string
    in: header
    description: Http method for the most relevant PSUâ€™s terminal request to the TTP
  PsuDateHeader:
    name: PSU-Date
    type: string
    in: header
    description: Timestamp of the most relevant PSUâ€™s terminal request to the TTP
  PsuGeoLocation:
    name: PSU-GEO-Location
    type: string
    in: header
    description: Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
  PsuUserAgentHeader:
    name: PSU-User-Agent
    type: string
    in: header
    description: |
      "User-Agent" header field sent by the PSU terminal when connecting to the TPP
  PsuRefererHeader:
    name: PSU-Referer
    type: string
    in: header
    description: |
      "Referer" header field sent by the PSU terminal when connecting to the TPP.
      Notice that an initial typo in RFC 1945 specifies that "referer" (incorrect spelling) is to be used. The correct spelling "referrer" can be used but might not be understood.
  PsuAcceptHeader:
    name: PSU-Accept
    type: string
    in: header
    description: |
      "Accept" header field sent by the PSU terminal when connecting to the TPP
  PsuAcceptCharsetHeader:
    name: PSU-Accept-Charset
    type: string
    in: header
    description: |
      "Accept-Charset" header field sent by the PSU terminal when connecting to the TPP
  PsuAcceptEncodingHeader:
    name: PSU-Accept-Encoding
    type: string
    in: header
    description: |
      "Accept-Encoding" header field sent by the PSU terminal when connecting to the TPP
  PsuAcceptLanguageHeader:
    name: PSU-Accept-Language
    type: string
    in: header
    description: |
      "Accept-Language" header field sent by the PSU terminal when connecting to the TPP
  PsuDeviceId:
    name: PSU-Device-ID
    in: header
    description: |
      UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
      UUID identifies either a device or a device dependant application installation.
      In case of installation identification this ID need to be unaltered until removal from device.
    type: string
  DigestHeader:
    name: Digest
    type: string
    in: header
    required: false
    description: Digest of the body
  SignatureHeader:
    name: Signature
    type: string
    in: header
    required: true
    description: |
      [http-signature of the request](https://datatracker.ietf.org/doc/draft-cavage-http-signatures/)
      The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate.
  Correlation:
    name: X-Request-ID
    type: string
    maxLength: 70
    in: header
    required: true
    description: |
      Correlation header to be set in a request and retrieved in the relevant response
  

## body parameters
  PaymentRequest:
    name: paymentRequest
    in: body
    description: ISO20022 based payment Initiation Request
    required: true
    schema: 
      $ref: '#/definitions/PaymentRequestResource'
### Modified for CR357: Clarify that a body is always required for posting a confirmation
  Confirmation:
    name: confirmationRequest
    in: body
    required: true
    description: |
      Parameters needed for confirmation of the Payment Request, especially in "EMBEDDED-1-FACTOR" approach
      Even though there is no parameter, a Json (void) body structure must be provided.
    schema:
      $ref: '#/definitions/ConfirmationResource'
  PaymentCoverageRequest:
    name: paymentCoverage
    in: body
    description: parameters of a payment coverage request
    required: true
    schema:
      $ref: '#/definitions/PaymentCoverageRequestResource'
### Modified for CR300: Fix the "put /consents" request body cardinality
  Consents:
    name: access
    in: body
    description: List of consents granted to the AISP by the PSU.
    required: true
    schema:
      $ref: '#/definitions/Access'
